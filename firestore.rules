/**
 * @description This ruleset enforces a role-based access control system with user-owned data and admin overrides.
 * All write operations are secured by identity checks. The data model includes users, farms, orders, and subscription plans.
 * @dataStructure
 * - /users/{userId}: User profiles, accessible to admins and the user themselves.
 * - /roles_admin/{userId}: Admin role definitions. Existence implies admin status.
 * - /farms/{farmId}: Farm information, publicly readable, writable by the farm owner.
 * - /farms/{farmId}/farmData/{farmDataId}: Farm data, accessible only by the farm owner.
 * - /farms/{farmId}/alerts/{alertId}: Farm alerts, accessible only by the farm owner.
 * - /subscriptionPlans/{subscriptionPlanId}: Publicly readable subscription plans, only manageable by admins.
 * - /orders/{orderId}: Orders, accessible to associated farmers and dealers.
 * - /suppliers/{supplierId}: Suppliers, accessible only by the owning dealer.
 * @keySecurityDecisions
 * - Admins can list all users and have full access to subscription plans and admin data.
 * - Users can only view and update their own profiles.
 * - Farms are publicly readable, but only the owner can modify them.
 * - Subscription plans are publicly readable, but only admins can manage them.
 * - Orders are accessible to the associated farmer and dealer.
 * - Listing of the /users collection is restricted to admins.
 * @denormalizationForAuthorization
 * - User ownership of farms is enforced using the `ownerId` field within the `/farms/{farmId}` document.
 * - Order authorization is enforced using the `farmerId` and `dealerId` within the `/orders/{orderId}` document.
 * @structuralSegregation
 * - No structural segregation is applied.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is an admin by verifying the existence of their UID in the /roles_admin/{userId} collection.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId and the document exists.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Defines access rules for the /roles_admin/{userId} collection.
     * @path /roles_admin/{userId}
     * @allow (get, list) If the user is signed in.
     * @deny (create, update, delete) If the user is not an admin.
     * @principle Enforces role-based access control.
     */
    match /roles_admin/{userId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Defines access rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (get, update) If the user is signed in and is the owner of the profile.
     * @allow (list) If the user is an admin.
     * @allow (create, delete) If the user is an admin.
     * @deny (get, update) If the user is not the owner of the profile and not an admin.
     * @deny (list) If the user is not an admin.
     * @deny (create, delete) If the user is not an admin.
     * @principle Enforces user-owned data with admin overrides.
     */
    match /users/{userId} {
      allow list, get: if isAdmin();
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Defines access rules for the /farms/{farmId} collection.
     * @path /farms/{farmId}
     * @allow (get, list) If true (publicly readable).
     * @allow (create) If the user is signed in and the `ownerId` in the request matches the user's UID.
     * @allow (update, delete) If the user is signed in and the user is the owner.
     * @deny (create) If the user is not the owner.
     * @deny (update, delete) If the user is not the owner.
     * @principle Public read access with owner-only writes.
     */
    match /farms/{farmId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.id == farmId;
      allow update: if isSignedIn() && resource.data.id == farmId;
      allow delete: if isSignedIn() && resource.data.id == farmId;
    }

    /**
     * @description Defines access rules for the /farms/{farmId}/farmData/{farmDataId} collection.
     * @path /farms/{farmId}/farmData/{farmDataId}
     * @allow (read, write) If the user is signed in and is the owner of the parent farm.
     * @deny (read, write) If the user is not signed in or is not the owner of the parent farm.
     * @principle Enforces farm ownership for data access.
     */
    match /farms/{farmId}/farmData/{farmDataId} {
      allow get, list, create, update, delete: if isSignedIn() && get(/databases/$(database)/documents/farms/$(farmId)).data.id == farmId;
    }

    /**
     * @description Defines access rules for the /farms/{farmId}/alerts/{alertId} collection.
     * @path /farms/{farmId}/alerts/{alertId}
     * @allow (read, write) If the user is signed in and is the owner of the parent farm.
     * @deny (read, write) If the user is not signed in or is not the owner of the parent farm.
     * @principle Enforces farm ownership for alert access.
     */
    match /farms/{farmId}/alerts/{alertId} {
      allow get, list, create, update, delete: if isSignedIn() && get(/databases/$(database)/documents/farms/$(farmId)).data.id == farmId;
    }

    /**
     * @description Defines access rules for the /subscriptionPlans/{subscriptionPlanId} collection.
     * @path /subscriptionPlans/{subscriptionPlanId}
     * @allow (get, list) If true (publicly readable).
     * @allow (create, update, delete) If the user is an admin.
     * @deny (create, update, delete) If the user is not an admin.
     * @principle Public read access with admin-only writes.
     */
    match /subscriptionPlans/{subscriptionPlanId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Defines access rules for the /orders/{orderId} collection.
     * @path /orders/{orderId}
     * @allow (get) If the user is signed in.
     * @allow (create, update, delete) If the user is signed in and is either the farmer or the dealer in the order.
     * @deny (create, update, delete) If the user is not the farmer or the dealer in the order.
     * @principle Enforces shared access between farmer and dealer.
     */
    match /orders/{orderId} {
      allow get: if isSignedIn();
      allow create: if isSignedIn() && (request.resource.data.farmerId == request.auth.uid || request.resource.data.dealerId == request.auth.uid);
      allow update: if isSignedIn() && (resource.data.farmerId == request.auth.uid || resource.data.dealerId == request.auth.uid);
      allow delete: if isSignedIn() && (resource.data.farmerId == request.auth.uid || resource.data.dealerId == request.auth.uid);
    }

    /**
     * @description Defines access rules for the /suppliers/{supplierId} collection.
     * @path /suppliers/{supplierId}
     * @allow (read, write) If the user is signed in and the `dealerUID` in the document matches the user's UID.
     * @deny (read, write) If the user is not signed in or is not the owner dealer.
     */
    match /suppliers/{supplierId} {
      allow get, list, create, update, delete: if isSignedIn() && request.resource.data.dealerUID == request.auth.uid;
    }
  }
}