/**
 * @fileoverview Firestore Security Rules for PoultryMitra application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-centric security model. Users can only
 * manage their own profile data. Admin privileges are granted by the
 * existence of a document in the `roles_admin` collection. Data associated
 * with farms, such as alerts and sensor data, is secured under the
 * respective `/farms/{farmId}` path, ensuring that only authorized users
 * can access this information. Orders are secured to allow both farmers and dealers
 * to manage their respective orders.
 *
 * Data Structure:
 * - /userProfiles/{userProfileId}: Stores individual user profiles.
 * - /roles_admin/{userId}: Indicates admin privileges. Document existence grants access.
 * - /farms/{farmId}: Stores general farm information.
 * - /farms/{farmId}/farmData/{farmDataId}: Stores time-series data for a specific farm.
 * - /farms/{farmId}/alerts/{alertId}: Stores alerts (critical and warning) for a specific farm.
 * - /subscriptionPlans/{subscriptionPlanId}: Stores information about available subscription plans.
 * - /orders/{orderId}: Stores order information, including farmerId and dealerId.
 *
 * Key Security Decisions:
 * - User profiles are private and only accessible to the owning user.
 * - Listing of all user profiles is explicitly denied.
 * - Admin privileges are determined by document existence in `/roles_admin/{userId}`.
 * - Farm data and alerts are restricted to authorized users (farm owners or admins).
 * - Subscription plans are publicly readable, but only admins can create, update, or delete them.
 * - Orders are accessible to both the farmer and the dealer involved.
 *
 * Denormalization for Authorization:
 * - The system denormalizes UserProfile into Farms, SubscriptionPlans, and Orders.
 *   This eliminates the need for costly `get()` calls in security rules. For
 *   example, the Order document includes both `farmerId` and `dealerId` to
 *   avoid having to fetch user profiles to validate order access.
 *
 * Structural Segregation:
 * - Admin roles are managed through a separate `/roles_admin` collection rather
 *   than an `isAdmin` boolean field on the `/userProfiles/{userId}` document.
 *   This simplifies the rules and makes admin role management more explicit.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /userProfiles/{userProfileId}
     * @allow (get) Signed-in user can read their own profile.
     * @allow (create) Signed-in user can create their own profile, enforcing user ID match.
     * @allow (update) Signed-in user can update their own profile.
     * @allow (delete) Signed-in user can delete their own profile.
     * @deny (get) Signed-in user attempts to read another user's profile.
     * @deny (create) Signed-in user attempts to create a profile with a mismatched ID.
     * @principle Enforces document ownership for all operations.
     */
    match /userProfiles/{userProfileId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userProfileId);
      allow list: if false; // Listing user profiles is not permitted.
      allow create: if isOwner(userProfileId) && request.resource.data.id == userProfileId;
      allow update: if isExistingOwner(userProfileId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userProfileId);
    }

    /**
     * @description Manages admin roles using document existence in the roles_admin collection.
     * @path /roles_admin/{userId}
     * @allow (get) Signed-in user can check if they are an admin.
     * @allow (create) Only admins can grant admin roles by creating documents.
     * @allow (update) Only admins can update admin roles.
     * @allow (delete) Only admins can revoke admin roles by deleting documents.
     * @deny (get) Non-signed in user attempts to read admin role
     * @principle Existence of document grants admin privileges, enforced by admin-only writes.
     */
    match /roles_admin/{userId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isAdmin() {
            return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
        }

        allow get: if isSignedIn();
        allow list: if false; // Listing admin roles is not permitted.
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

    /**
     * @description Manages farm information.
     * @path /farms/{farmId}
     * @allow (get, list) Public read access to farm information.
     * @allow (create) Only admins can create farms.
     * @allow (update, delete) Only admins can update or delete farms.
     * @principle Public read, admin-only write access.
     */
    match /farms/{farmId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
          return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get, list: if true; // Public read access.
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages time-series data for a specific farm.
     * @path /farms/{farmId}/farmData/{farmDataId}
     * @allow (get, list) Only admins can read farm data.
     * @allow (create) Only admins can create farm data entries.
     * @allow (update, delete) Only admins can update or delete farm data entries.
     * @principle Admin-only access to sensitive farm data.
     */
    match /farms/{farmId}/farmData/{farmDataId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
          return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages alerts for a specific farm.
     * @path /farms/{farmId}/alerts/{alertId}
     * @allow (get, list) Only admins can read farm alerts.
     * @allow (create) Only admins can create farm alerts.
     * @allow (update, delete) Only admins can update or delete farm alerts.
     * @principle Admin-only access to farm alerts.
     */
    match /farms/{farmId}/alerts/{alertId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
          return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages information about available subscription plans.
     * @path /subscriptionPlans/{subscriptionPlanId}
     * @allow (get, list) Public read access to subscription plans.
     * @allow (create, update, delete) Only admins can manage subscription plans.
     * @principle Public read, admin-only write access.
     */
    match /subscriptionPlans/{subscriptionPlanId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
          return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get, list: if true; // Public read access.
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages order information between farmers and dealers.
     * @path /orders/{orderId}
     * @allow (get) Farmer or dealer can read their orders.
     * @allow (create) Farmer or dealer can create orders.
     * @allow (update) Farmer or dealer can update their orders.
     * @allow (delete) Farmer or dealer can delete their orders.
     * @deny (get) User attempts to read an order that doesn't belong to them.
     * @principle Shared access: Orders accessible to both farmer and dealer involved.
     */
    match /orders/{orderId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isFarmerOrDealer(farmerId, dealerId) {
        return isSignedIn() && (request.auth.uid == farmerId || request.auth.uid == dealerId);
      }

      function isExistingFarmerOrDealer(farmerId, dealerId) {
        return isFarmerOrDealer(farmerId, dealerId) && resource != null;
      }

      allow get: if isFarmerOrDealer(resource.data.farmerId, resource.data.dealerId);
      allow list: if isSignedIn();
      allow create: if isSignedIn() && (request.resource.data.farmerId == request.auth.uid || request.resource.data.dealerId == request.auth.uid);
      allow update: if isExistingFarmerOrDealer(resource.data.farmerId, resource.data.dealerId);
      allow delete: if isExistingFarmerOrDealer(resource.data.farmerId, resource.data.dealerId);
    }
  }
}