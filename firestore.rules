/**
 * @fileoverview Firestore Security Rules for PoultryMitra application.
 *
 * Core Philosophy:
 * This ruleset prioritizes a secure, owner-centric access control model. Users
 * generally have full control over their own data, while access to other
 * users' data is restricted.  Admin privileges are granted based on
 * document existence in the `roles_admin` collection.
 *
 * Data Structure:
 * - `/users/{userId}`: User profile data.
 * - `/roles_admin/{userId}`:  Admin role indicators.
 * - `/farms/{farmId}`: Farm information.
 * - `/farms/{farmId}/farmData/{farmDataId}`: Time-series farm data.
 * - `/farms/{farmId}/alerts/{alertId}`: Farm alerts.
 * - `/subscriptionPlans/{subscriptionPlanId}`: Subscription plan details.
 * - `/orders/{orderId}`: Order information linking farmers and dealers.
 * - `/suppliers/{supplierId}`: Supplier information.
 *
 * Key Security Decisions:
 * - User profiles are only accessible and modifiable by the owning user.
 * - Listing of all users is disallowed to protect user privacy.
 * - Admin privileges are granted based on document existence in the `roles_admin` collection.
 * - All write operations require authentication (user must be signed in).
 * - Data validation is limited to ensuring relational integrity and preventing
 *   tampering with critical ownership fields.
 *
 * Denormalization for Authorization:
 * -  The rules leverage the `roles_admin` collection to determine admin privileges
 *    without needing to store admin status within user profiles.
 *
 * Structural Segregation:
 * - Uses the `/roles_admin` collection to segregate admin role data from general
 *   user profile data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile if the userId matches their auth UID.
     * @allow (get, update, delete) Authenticated user can access and modify their own profile.
     * @deny (create) Unauthenticated user cannot create a profile.
     * @deny (get, update, delete) Authenticated user cannot access or modify another user's profile.
     * @principle Enforces document ownership; users can only manage their own profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Manages admin role assignments.
     * @path /roles_admin/{userId}
     * @allow (create, get, update, delete) Only existing admins can manage admin roles.
     * @deny (create, get, update, delete) Non-admins cannot manage admin roles.
     * @principle Existence in this collection grants admin privileges.
     */
    match /roles_admin/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

       allow get: if isAdmin();
       allow list: if false;
       allow create: if isAdmin();
       allow update: if isAdmin();
       allow delete: if isAdmin();
    }

    /**
     * @description Controls access to farm documents.
     * @path /farms/{farmId}
     * @allow (get, list) Public read access to farm information.
     * @allow (create) Authenticated user can create a farm document. The 'ownerId' field in the request must match their auth UID.
     * @allow (update, delete) Authenticated user can update and delete farm documents they own.
     * @deny (create) Unauthenticated user cannot create a farm.
     * @deny (update, delete) Authenticated user cannot modify or delete a farm they don't own.
     * @principle Public read, owner-only write access; validates ownership on creation.
     */
    match /farms/{farmId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(farmId) {
          return isSignedIn() && resource.data.ownerId == request.auth.uid;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.ownerId == resource.data.ownerId && request.auth.uid == resource.data.ownerId;
      allow delete: if isSignedIn() && request.auth.uid == resource.data.ownerId;
    }

    /**
     * @description Controls access to farm data documents.
     * @path /farms/{farmId}/farmData/{farmDataId}
     * @allow (get, list) Public read access to farm data.
     * @allow (create) Authenticated user can create farm data if they own the farm. The 'farmId' field in the request must match the parent farmId.
     * @allow (update, delete) Authenticated user can update and delete farm data for farms they own.
     * @deny (create) Unauthenticated user cannot create farm data.
     * @deny (update, delete) Authenticated user cannot modify or delete farm data for farms they don't own.
     * @principle Public read, owner-only write access; enforces farmId consistency.
     */
    match /farms/{farmId}/farmData/{farmDataId} {
      function isSignedIn() {
        return request.auth != null;
      }

     function isFarmOwner(farmId) {
        return isSignedIn() && exists(/databases/$(database)/documents/farms/$(farmId)) &&
               get(/databases/$(database)/documents/farms/$(farmId)).data.ownerId == request.auth.uid;
      }


      allow get, list: if true;
      allow create: if isSignedIn() && isFarmOwner(farmId);
      allow update: if isSignedIn() && isFarmOwner(farmId);
      allow delete: if isSignedIn() && isFarmOwner(farmId);
    }

    /**
     * @description Controls access to farm alert documents.
     * @path /farms/{farmId}/alerts/{alertId}
     * @allow (get, list) Public read access to farm alerts.
     * @allow (create) Authenticated user can create farm alerts if they own the farm. The 'farmId' field in the request must match the parent farmId.
     * @allow (update, delete) Authenticated user can update and delete farm alerts for farms they own.
     * @deny (create) Unauthenticated user cannot create farm alerts.
     * @deny (update, delete) Authenticated user cannot modify or delete farm alerts for farms they don't own.
     * @principle Public read, owner-only write access; enforces farmId consistency.
     */
    match /farms/{farmId}/alerts/{alertId} {
      function isSignedIn() {
        return request.auth != null;
      }

     function isFarmOwner(farmId) {
        return isSignedIn() && exists(/databases/$(database)/documents/farms/$(farmId)) &&
               get(/databases/$(database)/documents/farms/$(farmId)).data.ownerId == request.auth.uid;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isFarmOwner(farmId);
      allow update: if isSignedIn() && isFarmOwner(farmId);
      allow delete: if isSignedIn() && isFarmOwner(farmId);
    }

    /**
     * @description Controls access to subscription plan documents.
     * @path /subscriptionPlans/{subscriptionPlanId}
     * @allow (get, list) Public read access to subscription plans.
     * @allow (create) Only admins can create subscription plans.
     * @allow (update, delete) Only admins can update and delete subscription plans.
     * @deny (create, update, delete) Non-admins cannot manage subscription plans.
     * @principle Public read, admin-only write access.
     */
    match /subscriptionPlans/{subscriptionPlanId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

       allow get, list: if true;
       allow create: if isAdmin();
       allow update: if isAdmin();
       allow delete: if isAdmin();
    }

    /**
     * @description Controls access to order documents.
     * @path /orders/{orderId}
     * @allow (get, list) Public read access to orders.
     * @allow (create) Authenticated user can create orders.
     * @allow (update, delete) Authenticated user can update and delete orders they are associated with (either as farmer or dealer).
     * @deny (create) Unauthenticated user cannot create orders.
     * @deny (update, delete) Authenticated user cannot modify or delete orders they are not associated with.
     */
    match /orders/{orderId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isRelatedUser() {
        return isSignedIn() && (resource.data.farmerId == request.auth.uid || resource.data.dealerId == request.auth.uid);
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && (request.auth.uid == resource.data.farmerId || request.auth.uid == resource.data.dealerId);
      allow delete: if isSignedIn() && (request.auth.uid == resource.data.farmerId || request.auth.uid == resource.data.dealerId);
    }

    /**
     * @description Controls access to supplier documents.
     * @path /suppliers/{supplierId}
     * @allow (get, list) Only the dealer who owns the supplier can read their suppliers.
     * @allow (create) Only the dealer can create a supplier under their account. The 'dealerUID' field in the request must match their auth UID.
     * @allow (update, delete) Only the dealer who owns the supplier can update or delete it.
     * @deny (create) Unauthenticated users cannot create suppliers.
     * @deny (update, delete) Other dealers cannot modify or delete suppliers owned by another dealer.
     */
    match /suppliers/{supplierId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner() {
          return isSignedIn() && resource.data.dealerUID == request.auth.uid;
      }

      allow get, list: if isOwner();
      allow create: if isSignedIn() && request.resource.data.dealerUID == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.dealerUID == request.auth.uid;
      allow delete: if isSignedIn() && request.resource.data.dealerUID == request.auth.uid;
    }
  }
}