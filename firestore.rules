/**
 * @fileoverview Firestore Security Rules for PoultryMitra application.
 *
 * Core Philosophy:
 * This ruleset employs a hybrid security model, balancing open read access for some collections with strict ownership and role-based access controls for others. User data is secured behind ownership checks, while certain collections like `SubscriptionPlan` are publicly readable. Admin privileges are managed via document existence in the `roles_admin` collection.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores individual user profiles, accessible only by the user themselves.
 * - `/roles_admin/{userId}`: Indicates admin privileges. Document existence grants admin role to the associated user.
 * - `/farms/{farmId}`: Stores farm information. Access control is not defined in provided reasoning.
 * - `/farms/{farmId}/farmData/{farmDataId}`: Stores sensor data related to farms. Access control is not defined in provided reasoning.
 * - `/farms/{farmId}/alerts/{alertId}`: Stores alerts related to farms. Access control is not defined in provided reasoning.
 * - `/subscriptionPlans/{subscriptionPlanId}`: Contains publicly readable data about subscription plans.
 * - `/orders/{orderId}`: Stores order information, with access restricted to the involved farmer and dealer.
 * - `/suppliers/{supplierId}`: Stores supplier information, accessible only by the owning dealer.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - Public read access is granted to the `subscriptionPlans` collection.
 * - Ambiguous relationships default to strict owner-only access.
 * - Existence-based authorization is used for admin roles, simplifying rule logic.
 *
 * Denormalization for Authorization:
 * The `UserProfile` is denormalized into relevant documents (farms, subscriptionPlans, orders) to avoid costly `get()` calls in security rules. This allows for efficient authorization checks based on local data.
 *
 * Structural Segregation:
 * The application segregates admin role definitions into a separate `roles_admin` collection, improving security and maintainability compared to embedding role flags within the `UserProfile` document itself.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to a user's own profile.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their profile at /users/user123.
     * @allow (get) - User with UID 'user123' can read their profile at /users/user123.
     * @allow (update) - User with UID 'user123' can update their profile at /users/user123.
     * @allow (delete) - User with UID 'user123' can delete their profile at /users/user123.
     * @deny (create) - User with UID 'user456' cannot create a profile at /users/user123.
     * @deny (get) - User with UID 'user456' cannot read the profile at /users/user123.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      //Utility function for checking if the request is coming from the signed in user
      function isSignedIn() {
        return request.auth != null;
      }

      //Utility function for checking if the requested user id is the same as the signed in user's id
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      //Utility function for checking if the requested user id is the same as the signed in user's id AND the document exists
      function isExistingOwner(userId) {
        return isOwner(userId) && exists(/databases/$(database)/documents/users/$(userId));
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is not allowed.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants admin privileges based on document existence.
     * @path /roles_admin/{userId}
     * @allow (create) - Admin user with UID 'admin123' can create their admin role document at /roles_admin/admin123.
     * @allow (get) - Any user can read the admin role document at /roles_admin/admin123.
     * @allow (update) - Admin user with UID 'admin123' can update their admin role document at /roles_admin/admin123.
     * @allow (delete) - Admin user with UID 'admin123' can delete their admin role document at /roles_admin/admin123.
     * @deny (create) - Non-admin user cannot create an admin role document.
     * @deny (get) - Non-admin user is still able to read the document to understand who is an admin.
     * @principle Uses existence-based authorization for admin roles.
     */
    match /roles_admin/{userId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get: if true; // Allow anyone to read admin documents
      allow list: if false; // No listing of admin roles
      allow create: if isSignedIn() && isAdmin() && request.auth.uid == userId; // Only existing admins can create new admin roles.
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin() && request.auth.uid == userId;
    }

    /**
     * @description Grants access to farm information.
     * @path /farms/{farmId}
     * @allow (create) - Cannot determine access control without more information
     * @allow (get) - Cannot determine access control without more information
     * @allow (update) - Cannot determine access control without more information
     * @allow (delete) - Cannot determine access control without more information
     * @deny (create) - Cannot determine access control without more information
     * @deny (get) - Cannot determine access control without more information
     * @principle: Placeholder rules. Please define the precise access control.
     */
    match /farms/{farmId} {
       allow get, list: if true; // Allow read for now
       allow create: if request.auth != null; // Allow create for authenticated users
       allow update, delete: if false; // Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Grants access to time-series farm data.
     * @path /farms/{farmId}/farmData/{farmDataId}
     * @allow (create) - Cannot determine access control without more information
     * @allow (get) - Cannot determine access control without more information
     * @allow (update) - Cannot determine access control without more information
     * @allow (delete) - Cannot determine access control without more information
     * @deny (create) - Cannot determine access control without more information
     * @deny (get) - Cannot determine access control without more information
     * @principle: Placeholder rules. Please define the precise access control.
     */
    match /farms/{farmId}/farmData/{farmDataId} {
       allow get, list: if true; // Allow read for now
       allow create: if request.auth != null; // Allow create for authenticated users
       allow update, delete: if false; // Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Grants access to farm alerts.
     * @path /farms/{farmId}/alerts/{alertId}
     * @allow (create) - Cannot determine access control without more information
     * @allow (get) - Cannot determine access control without more information
     * @allow (update) - Cannot determine access control without more information
     * @allow (delete) - Cannot determine access control without more information
     * @deny (create) - Cannot determine access control without more information
     * @deny (get) - Cannot determine access control without more information
     * @principle: Placeholder rules. Please define the precise access control.
     */
    match /farms/{farmId}/alerts/{alertId} {
       allow get, list: if true; // Allow read for now
       allow create: if request.auth != null; // Allow create for authenticated users
       allow update, delete: if false; // Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Grants public read access to subscription plans.
     * @path /subscriptionPlans/{subscriptionPlanId}
     * @allow (get) - Any user can read subscription plans.
     * @deny (create) - Nobody can create subscription plans
     * @principle Grants public read access
     */
    match /subscriptionPlans/{subscriptionPlanId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants access to order information.
     * @path /orders/{orderId}
     * @allow (create) - Farmer or dealer can create an order.
     * @allow (get) - Farmer or dealer can get the order.
     * @allow (update) - Farmer or dealer can update the order.
     * @allow (delete) - Farmer or dealer can delete the order.
     * @deny (create) - User who is not the farmer or dealer cannot create an order.
     * @principle Grants access to order information for farmers and dealers.
     */
    match /orders/{orderId} {
      function isFarmerOrDealer(farmerId, dealerId) {
        return request.auth.uid == farmerId || request.auth.uid == dealerId;
      }

      function isExistingFarmerOrDealer(farmerId, dealerId) {
        return isFarmerOrDealer(farmerId, dealerId) && exists(/databases/$(database)/documents/orders/$(orderId));
      }

      allow get: if isSignedIn() && (resource.data.farmerId == request.auth.uid || resource.data.dealerId == request.auth.uid);
      allow list: if false; // No listing of orders for now
      allow create: if isSignedIn() && (request.resource.data.farmerId == request.auth.uid || request.resource.data.dealerId == request.auth.uid);
      allow update: if isSignedIn() && (resource.data.farmerId == request.auth.uid || resource.data.dealerId == request.auth.uid);
      allow delete: if isSignedIn() && (resource.data.farmerId == request.auth.uid || resource.data.dealerId == request.auth.uid);
    }

    /**
     * @description Manages access to supplier information, restricting it to the owning dealer.
     * @path /suppliers/{supplierId}
     * @allow (create) - A dealer can create supplier information with a matching dealerUID.
     * @allow (get) - A dealer can read their own supplier information.
     * @allow (update) - A dealer can update their own supplier information.
     * @allow (delete) - A dealer can delete their own supplier information.
     * @deny (create) - A non-dealer or a dealer with a mismatched UID cannot create supplier information.
     * @deny (get) - A dealer cannot read supplier information that doesn't belong to them.
     * @principle Restricts supplier management to the owning dealer.
     */
    match /suppliers/{supplierId} {
      function isDealerOwned(dealerUID) {
        return request.auth.uid == dealerUID;
      }

      function isExistingDealerOwned(dealerUID) {
        return isDealerOwned(dealerUID) && exists(/databases/$(database)/documents/suppliers/$(supplierId));
      }

      allow get: if isSignedIn() && (resource.data.dealerUID == request.auth.uid);
      allow list: if false; //No listing of suppliers.
      allow create: if isSignedIn() && (request.resource.data.dealerUID == request.auth.uid);
      allow update: if isSignedIn() && (resource.data.dealerUID == request.auth.uid);
      allow delete: if isSignedIn() && (resource.data.dealerUID == request.auth.uid);
    }
  }
}