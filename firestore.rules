rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) - If the user is creating their own profile (userId matches auth.uid).
     * @allow (get, update, delete) - If the user is the owner of the profile.
     * @deny (create) - If the user is trying to create a profile for a different userId.
     * @deny (get, update, delete) - If the user is not the owner of the profile.
     * @principle Enforces strict user ownership for profile data.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to farm information.
     * @path /farms/{farmId}
     * @allow (get, list) - Public read access.
     * @allow (create) - If the user's email is in the allowed admin list.
     * @allow (update, delete) - If the user's email is in the allowed admin list and the document exists.
     * @deny (create, update, delete) - If the user is not an admin.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /farms/{farmId} {
      function isAdmin() {
        let adminEmails = ["poultrymitra@gmail.com"];
        return request.auth.token.email in adminEmails;
      }
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to farm data.
     * @path /farms/{farmId}/farmData/{farmDataId}
     * @allow (get, list) - Public read access.
     * @allow (create) - If the user's email is in the allowed admin list.
     * @allow (update, delete) - If the user's email is in the allowed admin list and the document exists.
     * @deny (create, update, delete) - If the user is not an admin.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /farms/{farmId}/farmData/{farmDataId} {
        function isAdmin() {
            let adminEmails = ["poultrymitra@gmail.com"];
            return request.auth.token.email in adminEmails;
        }

        allow get, list: if true;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

    /**
     * @description Controls access to farm alerts.
     * @path /farms/{farmId}/alerts/{alertId}
     * @allow (get, list) - Public read access.
     * @allow (create) - If the user's email is in the allowed admin list.
     * @allow (update, delete) - If the user's email is in the allowed admin list and the document exists.
     * @deny (create, update, delete) - If the user is not an admin.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /farms/{farmId}/alerts/{alertId} {
        function isAdmin() {
            let adminEmails = ["poultrymitra@gmail.com"];
            return request.auth.token.email in adminEmails;
        }

        allow get, list: if true;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

    /**
     * @description Controls access to subscription plan information.
     * @path /subscriptionPlans/{subscriptionPlanId}
     * @allow (get, list) - Public read access.
     * @deny (create, update, delete) - No write access allowed.
     * @principle Allows public read access but restricts write access.
     */
    match /subscriptionPlans/{subscriptionPlanId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to order information.
     * @path /orders/{orderId}
     * @allow (get) - If the user is the farmer or dealer associated with the order.
     * @allow (list) - If the user's email is in the allowed admin list.
     * @allow (create) - If the user is the farmer or dealer creating the order.
     * @allow (update) - If the user's email is in the allowed admin list and the document exists.
     * @allow (delete) - If the user's email is in the allowed admin list and the document exists.
     * @deny (get) - If the user is not the farmer or dealer associated with the order.
     * @deny (create) - If the user is not the farmer or dealer creating the order.
     * @principle Restricts order access to the farmer, dealer, or admin.
     */
    match /orders/{orderId} {
      function isFarmerOrDealer() {
        return resource.data.farmerId == request.auth.uid || resource.data.dealerId == request.auth.uid;
      }
      function isAdmin() {
        let adminEmails = ["poultrymitra@gmail.com"];
        return request.auth.token.email in adminEmails;
      }

      allow get: if isFarmerOrDealer();
      allow list: if isAdmin();
      allow create: if request.resource.data.farmerId == request.auth.uid || request.resource.data.dealerId == request.auth.uid;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to supplier information.
     * @path /suppliers/{supplierId}
     * @allow (get, list) - If the user is the dealer associated with the supplier.
     * @allow (create) - If the user is the dealer creating the supplier.
     * @allow (update, delete) - If the user is the dealer associated with the supplier and the document exists.
     * @deny (get, list) - If the user is not the dealer associated with the supplier.
     * @deny (create, update, delete) - If the user is not the dealer associated with the supplier.
     * @principle Restricts supplier access to the owning dealer.
     */
    match /suppliers/{supplierId} {
      function isDealerOwned() {
        return resource.data.dealerUID == request.auth.uid;
      }

      allow get, list: if isDealerOwned();
      allow create: if request.resource.data.dealerUID == request.auth.uid;
      allow update: if isDealerOwned();
      allow delete: if isDealerOwned();
    }
  }
}