/**
 * @fileOverview
 * This ruleset enforces a strict user-ownership model for user profiles and farm-related data,
 * with additional role-based access for administrators. Dealers have ownership over their suppliers.
 * Public read access is granted for subscription plans.
 *
 * @dataStructure
 * - `/users/{userId}`: Stores user profile information, accessible only by the user.
 * - `/roles_admin/{userId}`: Presence of a document grants admin privileges to the user.
 * - `/farms/{farmId}`: Stores farm information.
 * - `/farms/{farmId}/farmData/{farmDataId}`: Stores farm data, accessible only with ownership of the parent farm.
 * - `/farms/{farmId}/alerts/{alertId}`: Stores farm alerts, accessible only with ownership of the parent farm.
 * - `/subscriptionPlans/{subscriptionPlanId}`: Stores subscription plan details, publicly readable.
 * - `/orders/{orderId}`: Stores order information, accessible only to the farmer or dealer involved.
 * - `/suppliers/{supplierId}`: Stores information about a dealer's suppliers. Only the dealer can manage these.
 *
 * @keySecurityDecisions
 * - User listing is disallowed to protect user privacy.
 * - Admin privileges are granted based on document existence in `/roles_admin/{userId}`.
 * - Read-only access is granted to the `/subscriptionPlans` collection.
 * - Suppliers are owned by the dealer who created them.
 *
 * @denormalizationForAuthorization
 * - User IDs are used in document paths to establish ownership.
 * - Orders contain both farmerId and dealerId to simplify authorization checks.
 * - Suppliers contain a `dealerUID` field for authorization.
 *
 * @structuralSegregation
 * - No structural segregation is used in this ruleset.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Ensures the user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is an existing owner of the resource.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @returns {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user is an admin.
     * @returns {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description
     * Controls access to user profile documents.
     *
     * @path /users/{userId}
     * @allow (create) - User with ID 'user123' creates their own profile.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.id: 'user123'
     * @allow (get, update, delete) - User with ID 'user123' reads, updates, or deletes their own profile.
     *   - request.auth.uid: 'user123'
     * @deny (create) - User with ID 'user456' attempts to create a profile for user 'user123'.
     *   - request.auth.uid: 'user456'
     *   - request.resource.data.id: 'user123'
     * @deny (get, update, delete) - User with ID 'user456' attempts to read, update, or delete the profile of user 'user123'.
     *   - request.auth.uid: 'user456'
     * @principle Enforces document ownership for reads and writes, ensuring users can only access their own data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

     /**
      * @description
      * Manages admin user access. Only admins can read admin role documents.
      *
      * @path /roles_admin/{userId}
      * @allow (get) - An admin user reads their admin role document.
      *   - request.auth.uid: 'admin123'
      * @allow (create) - An admin user creates their admin role document.
      *   - request.auth.uid: 'admin123'
      * @deny (get) - A non-admin user attempts to read an admin role document.
      *   - request.auth.uid: 'user123'
      * @principle Restricts access to admin role documents to only admin users.
      */
    match /roles_admin/{userId} {
        allow get: if isAdmin();
        allow list: if false;
        allow create: if isAdmin();
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description
     * Controls access to farm documents.
     *
     * @path /farms/{farmId}
     * @allow (get, list) - Any authenticated user can read farm documents.
     * @allow (create) - An authenticated user creates a farm document.
     * @deny (update, delete) - Only the owner (creator) of the farm can update or delete it.
     * @principle Grants public read access while restricting write access to the owner.
     */
    match /farms/{farmId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description
     * Controls access to farm data documents under a specific farm.
     *
     * @path /farms/{farmId}/farmData/{farmDataId}
     * @allow (get, list) - Any authenticated user can read farm data.
     * @deny (create, update, delete) - Only the owner of the farm can create, update, or delete farm data.
     * @principle Grants public read access to farm data, restricting writes to the farm owner.
     */
    match /farms/{farmId}/farmData/{farmDataId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add owner validation based on the farm.
      allow update: if false; // TODO: Add owner validation based on the farm.
      allow delete: if false; // TODO: Add owner validation based on the farm.
    }

    /**
     * @description
     * Controls access to farm alert documents under a specific farm.
     *
     * @path /farms/{farmId}/alerts/{alertId}
     * @allow (get, list) - Any authenticated user can read farm alerts.
     * @deny (create, update, delete) - Only the owner of the farm can create, update, or delete farm alerts.
     * @principle Grants public read access to farm alerts, restricting writes to the farm owner.
     */
    match /farms/{farmId}/alerts/{alertId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add owner validation based on the farm.
      allow update: if false; // TODO: Add owner validation based on the farm.
      allow delete: if false; // TODO: Add owner validation based on the farm.
    }

    /**
     * @description
     * Controls access to subscription plan documents.
     *
     * @path /subscriptionPlans/{subscriptionPlanId}
     * @allow (get, list) - Any user can read subscription plan information.
     * @deny (create, update, delete) - No one can create, update, or delete subscription plans through the client.
     * @principle Grants public read access to subscription plans.
     */
    match /subscriptionPlans/{subscriptionPlanId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description
     * Controls access to order documents.
     *
     * @path /orders/{orderId}
     * @allow (get, list) - The farmer or dealer associated with the order can read it.
     * @allow (create) - An authenticated user can create an order with their farmerId or dealerId.
     * @deny (update, delete) - Only the farmer or dealer associated with the order can update or delete it.
     * @principle Restricts access to orders to the involved farmer and dealer.
     */
    match /orders/{orderId} {
      allow get: if isSignedIn() && (resource.data.farmerId == request.auth.uid || resource.data.dealerId == request.auth.uid);
      allow list: if isSignedIn(); // This is relaxed for prototyping, but consider owner-only or more specific listing rules
      allow create: if isSignedIn() && (request.resource.data.farmerId == request.auth.uid || request.resource.data.dealerId == request.auth.uid);
      allow update: if isSignedIn() && (resource.data.farmerId == request.auth.uid || resource.data.dealerId == request.auth.uid) && resource != null;
      allow delete: if isSignedIn() && (resource.data.farmerId == request.auth.uid || resource.data.dealerId == request.auth.uid) && resource != null;
    }

    /**
     * @description
     * Controls access to supplier documents. Only the dealer who owns the supplier can manage it.
     *
     * @path /suppliers/{supplierId}
     * @allow (get, list) - A dealer can read or list their own suppliers.
     * @allow (create) - A dealer can create a new supplier with their UID as the dealerUID.
     * @allow (update, delete) - Only the owning dealer can update or delete a supplier.
     * @principle Enforces dealer ownership for managing suppliers.
     */
    match /suppliers/{supplierId} {
        allow get: if isSignedIn() && resource.data.dealerUID == request.auth.uid;
        allow list: if isSignedIn() && resource.data.dealerUID == request.auth.uid;
        allow create: if isSignedIn() && request.resource.data.dealerUID == request.auth.uid;
        allow update: if isSignedIn() && resource.data.dealerUID == request.auth.uid && resource != null;
        allow delete: if isSignedIn() && resource.data.dealerUID == request.auth.uid && resource != null;
    }
  }
}