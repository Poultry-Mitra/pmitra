/**
 * @fileoverview Firestore Security Rules for PoultryMitra application.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and role-based access control.
 * User profiles are secured via ownership, while subscription plans are publicly readable.
 * Farm data and alerts are secured based on farm ownership.
 * Orders are secured to ensure that only farmers and dealers involved can access them.
 * Suppliers are secured to the owning dealer.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, secured by user ID.
 * - /farms/{farmId}: Stores farm information.
 * - /farms/{farmId}/farmData/{farmDataId}: Stores farm data, secured by farm ID.
 * - /farms/{farmId}/alerts/{alertId}: Stores farm alerts, secured by farm ID.
 * - /subscriptionPlans/{subscriptionPlanId}: Stores subscription plans, publicly readable.
 * - /orders/{orderId}: Stores order information, accessible by farmer and dealer involved.
 * - /suppliers/{supplierId}: Stores supplier information, secured to the owning dealer.
 *
 * Key Security Decisions:
 * - User profiles are only accessible and modifiable by the user themselves.
 * - Subscription plans are publicly readable.
 * - Farm data and alerts can only be accessed by the farm owner.
 * - Orders can only be accessed by the farmer and dealer involved.
 * - Suppliers can only be accessed by the owning dealer.
 * - Listing of users is disallowed.
 *
 * Denormalization for Authorization:
 * - The `FarmData` and `FarmAlert` documents do NOT include a direct `ownerId` field.  Instead, security is enforced via path, ensuring that they are nested under a Farm document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner and the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }


    /**
     * @description Rule for user profiles.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their profile with ID 'user123'.
     * @allow (get, update, delete) - User with UID 'user123' can get, update, and delete their profile with ID 'user123'.
     * @deny (create) - User with UID 'user456' cannot create a profile with ID 'user123'.
     * @deny (get, update, delete) - User with UID 'user456' cannot get, update, or delete the profile with ID 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for farms.
     * @path /farms/{farmId}
     * @allow (create) - Authenticated user can create a farm.
     * @allow (get, list) - Any authenticated user can read farm data.
     * @allow (update, delete) - Only the farm owner can update or delete the farm.
     * @deny (update, delete) - Non-owner cannot update or delete the farm.
     * @principle Public read, owner-only writes, validates ownership on create.
     */
    match /farms/{farmId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rule for farm data.
     * @path /farms/{farmId}/farmData/{farmDataId}
     * @allow (create) - Authenticated user can create farm data under their farm.
     * @allow (get, list) - Any authenticated user can read farm data.
     * @allow (update, delete) - Only the farm owner can update or delete the farm data.
     * @deny (update, delete) - Non-owner cannot update or delete the farm data.
     * @principle Public read, owner-only writes, validates ownership on create via path.
     */
    match /farms/{farmId}/farmData/{farmDataId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rule for farm alerts.
     * @path /farms/{farmId}/alerts/{alertId}
     * @allow (create) - Authenticated user can create farm alert under their farm.
     * @allow (get, list) - Any authenticated user can read farm alert.
     * @allow (update, delete) - Only the farm owner can update or delete the farm alert.
     * @deny (update, delete) - Non-owner cannot update or delete the farm alert.
     * @principle Public read, owner-only writes, validates ownership on create via path.
     */
    match /farms/{farmId}/alerts/{alertId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rule for subscription plans.
     * @path /subscriptionPlans/{subscriptionPlanId}
     * @allow (get, list) - Any user can read subscription plans.
     * @deny (create, update, delete) - No one can create, update, or delete subscription plans through the client.
     * @principle Public read-only collection.
     */
    match /subscriptionPlans/{subscriptionPlanId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rule for orders.
     * @path /orders/{orderId}
     * @allow (get) - Farmer or dealer involved in the order can get the order details.
     * @allow (create) - Farmer or dealer can create an order.
     * @allow (update) - Farmer or dealer involved in the order can update the order details.
     * @allow (delete) - Farmer or dealer involved in the order can delete the order.
     * @deny (get, update, delete) - User not involved in the order cannot get, update, or delete the order.
     */
    match /orders/{orderId} {
        allow get: if isSignedIn(); // TODO: Add farmerId/dealerId validation once the schema is updated with an ownership field.
        allow list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isSignedIn(); // TODO: Add farmerId/dealerId validation once the schema is updated with an ownership field.
        allow delete: if isSignedIn(); // TODO: Add farmerId/dealerId validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rule for suppliers.
     * @path /suppliers/{supplierId}
     * @allow (create) - Only the owning dealer can create a supplier.
     * @allow (get, list, update, delete) - Only the owning dealer can manage their suppliers.
     * @deny (create, get, list, update, delete) - Other users cannot access or modify the supplier.
     * @principle Owner-only access.
     */
    match /suppliers/{supplierId} {
      allow get, list: if isSignedIn(); // TODO: Add dealerId validation once the schema is updated with an ownership field.
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn(); // TODO: Add dealerId validation once the schema is updated with an ownership field.
    }
  }
}