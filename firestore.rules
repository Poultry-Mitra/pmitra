/**
 * @fileoverview Firestore Security Rules for PoultryMitra application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and farm data,
 * with special considerations for admin users. Dealers have ownership over their suppliers.
 * Data access is generally restricted to the owner or an admin, unless explicitly allowed.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, accessible only by the user or an admin.
 * - /roles_admin/{userId}: Admin user list, existence grants admin access.
 * - /farms/{farmId}: Stores farm information.
 * - /farms/{farmId}/farmData/{farmDataId}: Stores time-series data for a specific farm, accessible only by the farm owner or an admin.
 * - /farms/{farmId}/alerts/{alertId}: Stores alerts for a specific farm.
 * - /subscriptionPlans/{subscriptionPlanId}: Stores information about available subscription plans. Publicly readable.
 * - /orders/{orderId}: Stores order information, restricted to farmer and dealer involved.
 * - /suppliers/{supplierId}: Stores information about suppliers, accessible only by the dealer who owns them.
 *
 * Key Security Decisions:
 * - User listing is explicitly disallowed.
 * - Subscription plans are publicly readable.
 * - All write operations require authentication and authorization.
 * - Data validation is minimal, focusing on relational integrity and ownership.
 * - Admin status is determined by the existence of a document in `/roles_admin/{userId}`.
 *
 * Denormalization for Authorization:
 *  - UserProfile.id is required to match the document ID in /users/{userId} to ensure ownership.
 *  - FarmData.farmId must match the parent farm's ID.
 *  - Orders.farmerId and Orders.dealerId link orders to specific users.
 *  - Supplier.dealerUID must match the dealer's UID.
 *
 * Structural Segregation:
 *  - Private user data is stored under /users/{userId}, separate from public data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profiles, ensuring only the user or an admin can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile with matching userId.
     * @allow (get, update, delete) - Authenticated user with matching userId or an admin.
     * @deny (list) - User listing is not permitted.
     * @deny (create) - User attempts to create a profile with a mismatched userId.
     * @principle Enforces document ownership and admin override.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isOwner(userId) || isAdmin();
    }

    /**
     * @description Manages admin roles, granting admin privileges based on document existence.
     * @path /roles_admin/{userId}
     * @allow (create, get, update, delete) - Only existing admins can manage admin roles.
     * @deny (list) - Admin list should not be exposed.
     * @principle Grants admin privileges based on document existence.
     */
    match /roles_admin/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Manages farm information, accessible to the owner or an admin.
     * @path /farms/{farmId}
     * @allow (create) - Authenticated user creates a farm.
     * @allow (get, update, delete) - Owner or admin can get, update, or delete.
     * @deny (list) - Listing of farms is not permitted.
     * @principle Enforces document ownership and admin override.
     */
    match /farms/{farmId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      function isOwner() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.farmId == farmId;
      }

      allow get: if isSignedIn() && isOwner() || isAdmin();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && isOwner() || isAdmin();
      allow delete: if isSignedIn() && isOwner() || isAdmin();
    }

    /**
     * @description Manages farm data for a specific farm, accessible only by the farm owner or an admin.
     * @path /farms/{farmId}/farmData/{farmDataId}
     * @allow (create) - Owner or admin can create farm data.  Validates farmId.
     * @allow (get, update, delete) - Owner or admin can get, update, or delete farm data.
     * @deny (list) - Listing farm data is not permitted.
     * @principle Enforces document ownership via parent farm and admin override.
     */
    match /farms/{farmId}/farmData/{farmDataId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

       function isFarmOwner(farmId) {
        return get(/databases/$(database)/documents/farms/$(farmId)).data.uid == request.auth.uid;
      }

      allow get: if isSignedIn() && isFarmOwner(farmId) || isAdmin();
      allow list: if false;
      allow create: if isSignedIn() && isFarmOwner(farmId) || isAdmin();
      allow update: if isSignedIn() && isFarmOwner(farmId) || isAdmin();
      allow delete: if isSignedIn() && isFarmOwner(farmId) || isAdmin();
    }

    /**
     * @description Manages alerts for a specific farm, accessible only by the farm owner or an admin.
     * @path /farms/{farmId}/alerts/{alertId}
     * @allow (create) - Owner or admin can create alerts. Validates farmId.
     * @allow (get, update, delete) - Owner or admin can get, update, or delete alerts.
     * @deny (list) - Listing alerts is not permitted.
     * @principle Enforces document ownership via parent farm and admin override.
     */
    match /farms/{farmId}/alerts/{alertId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

       function isFarmOwner(farmId) {
        return get(/databases/$(database)/documents/farms/$(farmId)).data.uid == request.auth.uid;
      }

      allow get: if isSignedIn() && isFarmOwner(farmId) || isAdmin();
      allow list: if false;
      allow create: if isSignedIn() && isFarmOwner(farmId) || isAdmin();
      allow update: if isSignedIn() && isFarmOwner(farmId) || isAdmin();
      allow delete: if isSignedIn() && isFarmOwner(farmId) || isAdmin();
    }

    /**
     * @description Manages subscription plans, publicly readable.
     * @path /subscriptionPlans/{subscriptionPlanId}
     * @allow (get, list) - All users can read subscription plans.
     * @deny (create, update, delete) - Only admins can manage subscription plans.
     * @principle Allows public read access with restricted write access.
     */
    match /subscriptionPlans/{subscriptionPlanId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Manages orders between farmers and dealers.
     * @path /orders/{orderId}
     * @allow (get, update) - Farmer or dealer associated with the order can get, update.
     * @allow (create) - Farmer or dealer can create an order with correct farmerId and dealerId.
     * @deny (list) - Listing orders is not permitted.
     * @deny (delete) - Deleting orders is not permitted
     * @principle Enforces access based on farmerId and dealerId.
     */
    match /orders/{orderId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && (resource.data.farmerId == request.auth.uid || resource.data.dealerId == request.auth.uid);
      allow list: if false;
      allow create: if isSignedIn() && (request.resource.data.farmerId == request.auth.uid || request.resource.data.dealerId == request.auth.uid);
      allow update: if isSignedIn() && (resource.data.farmerId == request.auth.uid || resource.data.dealerId == request.auth.uid);
      allow delete: if false;
    }

    /**
     * @description Manages suppliers for a dealer.
     * @path /suppliers/{supplierId}
     * @allow (create, get, update, delete) - Only the dealer can manage their suppliers.
     * @deny (list) - Listing suppliers is not permitted.
     * @principle Enforces dealer ownership of suppliers.
     */
    match /suppliers/{supplierId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && resource.data.dealerUID == request.auth.uid;
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.dealerUID == request.auth.uid;
      allow update: if isSignedIn() && resource.data.dealerUID == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.dealerUID == request.auth.uid;
    }
  }
}