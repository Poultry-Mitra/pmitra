/**
 * @fileoverview Firestore Security Rules for PoultryMitra application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and farm data,
 * with an admin override based on email address.  Dealers can manage their own suppliers.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only by the user themselves.
 * - /farms/{farmId}: Farm information, publicly readable, but writable only by the farm owner (assumed to be the user who created the farm).
 * - /farms/{farmId}/farmData/{farmDataId}: Farm data (sensor readings), accessible only by the farm owner.
 * - /farms/{farmId}/alerts/{alertId}: Alerts for a specific farm, accessible only by the farm owner.
 * - /subscriptionPlans/{subscriptionPlanId}: Publicly readable subscription plan information.
 * - /orders/{orderId}: Order information, accessible to involved farmer and dealer.
 * - /suppliers/{supplierId}: Supplier information, accessible only by the owning dealer.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Subscription plans are publicly readable.
 * - The admin role is determined by checking the user's email address.
 * - All write operations require authentication.
 *
 * Denormalization for Authorization:
 * - The `FarmData` and `FarmAlert` documents are secured by checking the parent `/farms/{farmId}` document.
 * - Orders contain both `farmerId` and `dealerId` for easy authorization.
 *
 * Structural Segregation:
 * - Private user data (UserProfile) is stored separately from public data (SubscriptionPlan).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId - The user ID to check against.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner of the resource.
     * @param {string} userId - The user ID to check against.
     * @return {bool} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

     /**
     * @description Checks if the user is an administrator based on their email.
     * @return {bool} True if the user is an administrator, false otherwise.
     */
    function isAdmin() {
      return isSignedIn() && (request.auth.token.email == "admin@example.com" || request.auth.token.email == "admin2@example.com");
    }

    /**
     * @description User profile management.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile at /users/user123.
     * @deny (create) User with UID 'user123' cannot create a profile at /users/user456.
     * @allow (get) User with UID 'user123' can read their profile at /users/user123.
     * @deny (get) User with UID 'user123' cannot read the profile at /users/user456.
     * @allow (update) User with UID 'user123' can update their profile at /users/user123.
     * @deny (update) User with UID 'user123' cannot update the profile at /users/user456.
     * @allow (delete) User with UID 'user123' can delete their profile at /users/user123.
     * @deny (delete) User with UID 'user123' cannot delete the profile at /users/user456.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Farm data management. Publicly readable, owner-writable.
     * @path /farms/{farmId}
     * @allow (get) Any user can read farm data.
     * @allow (list) Any user can list farm data.
     * @allow (create) User with UID 'user123' can create a farm with 'ownerId: user123'.
     * @deny (create) User with UID 'user123' cannot create a farm with 'ownerId: user456'.
     * @allow (update) User with UID 'user123' can update a farm they own.
     * @deny (update) User with UID 'user123' cannot update a farm owned by 'user456'.
     * @allow (delete) User with UID 'user123' can delete a farm they own.
     * @deny (delete) User with UID 'user123' cannot delete a farm owned by 'user456'.
     * @principle Public read, owner-only writes.
     */
    match /farms/{farmId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Farm data entries (sensor readings).
     * @path /farms/{farmId}/farmData/{farmDataId}
     * @allow (get) Any user can read farm data.
     * @allow (list) Any user can list farm data.
     * @deny (create) Non-owner cannot create farm data.
     * @deny (update) Non-owner cannot update farm data.
     * @deny (delete) Non-owner cannot delete farm data.
     */
    match /farms/{farmId}/farmData/{farmDataId} {
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
    }

    /**
     * @description Farm alerts.
     * @path /farms/{farmId}/alerts/{alertId}
     *  @allow (get) Any user can read farm alerts.
     * @allow (list) Any user can list farm alerts.
     * @deny (create) Non-owner cannot create farm alerts.
     * @deny (update) Non-owner cannot update farm alerts.
     * @deny (delete) Non-owner cannot delete farm alerts.
     */
    match /farms/{farmId}/alerts/{alertId} {
       allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
    }

    /**
     * @description Subscription plans (publicly readable).
     * @path /subscriptionPlans/{subscriptionPlanId}
     * @allow (get) Any user can read subscription plans.
     * @allow (list) Any user can list subscription plans.
     * @deny (create) Nobody can create subscription plans.
     * @deny (update) Nobody can update subscription plans.
     * @deny (delete) Nobody can delete subscription plans.
     * @principle Public read-only data.
     */
    match /subscriptionPlans/{subscriptionPlanId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Order management between farmers and dealers.
     * @path /orders/{orderId}
     * @allow (create) Any signed in user can create an order.
     * @allow (get) Any signed in user can get an order.
     * @allow (list) Any signed in user can list orders.
     * @deny (update) Non-involved user cannot update orders.
     * @deny (delete) Non-involved user cannot delete orders.
     * @principle Shared access (closed collaborators)
     */
    match /orders/{orderId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Supplier management for dealers.
     * @path /suppliers/{supplierId}
     * @allow (create) Dealer can create their suppliers.
     * @allow (get) Dealer can get their suppliers.
     * @allow (list) Dealer can list their suppliers.
     * @deny (update) Non-owner dealer cannot update suppliers.
     * @deny (delete) Non-owner dealer cannot delete suppliers.
     * @principle Ownership.
     */
    match /suppliers/{supplierId} {
        allow get, list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
    }
  }
}