/**
 * @fileoverview Firestore Security Rules for PoultryMitra.
 *
 * Core Philosophy:
 * This ruleset enforces a hybrid security model, balancing open access for public data (e.g., SubscriptionPlans) with strict ownership and role-based access for sensitive data (e.g., UserProfiles, Farm data, and Orders). The rules prioritize data ownership and prevent unauthorized data access or modification.
 *
 * Data Structure:
 * - /userProfiles/{userId}: Stores personal user information. Access is restricted to the owning user and admins.
 * - /roles_admin/{userId}: Presence of a document grants admin privileges.
 * - /farms/{farmId}: Stores farm information.  Access is unrestricted.
 * - /farms/{farmId}/farmData/{farmDataId}: Stores sensor data for farms. Access is unrestricted.
 * - /farms/{farmId}/alerts/{alertId}: Stores alerts for farms. Access is unrestricted.
 * - /subscriptionPlans/{subscriptionPlanId}: Stores subscription plan details. Access is public.
 * - /orders/{orderId}: Stores order information, linking farmers and dealers. Access is restricted to involved users (farmer, dealer) and admins.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - Subscription plans are publicly readable.
 * - The `roles_admin` collection provides a simple and efficient way to manage admin privileges via document existence.
 *
 * Denormalization for Authorization:
 * - The rules leverage the `roles_admin` collection to determine admin privileges without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the owner can read/write their own profile. Admins can also read/write.
     * @path /userProfiles/{userProfileId}
     * @allow (get, update, delete) if isSignedIn() && (isOwner(userProfileId) || isAdmin())
     * @allow (create) if isSignedIn() && isOwner(userProfileId) // Self-creation
     * @allow (list) if false; // Listing users is forbidden.
     * @deny (get, update, delete) if !isSignedIn() || (!isOwner(userProfileId) && !isAdmin())
     * @principle Enforces strict user ownership and admin overrides.
     */
    match /userProfiles/{userProfileId} {
      allow get: if isSignedIn() && (isOwner(userProfileId) || isAdmin());
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userProfileId);
      allow update: if isSignedIn() && (isOwner(userProfileId) || isAdmin()) && isExistingOwner(userProfileId);
      allow delete: if isSignedIn() && (isOwner(userProfileId) || isAdmin()) && isExistingOwner(userProfileId);
    }

    /**
     * @description Defines admin roles.  Document existence grants admin privileges.
     * @path /roles_admin/{userId}
     * @allow (get, create, update, delete) if isAdmin()
     * @allow (list) if false; // No listing of admins.
     * @deny (get, create, update, delete) if !isAdmin()
     * @principle Implements existence-based authorization for admin roles.
     */
    match /roles_admin/{userId} {
      allow get, create, update, delete: if isAdmin();
      allow list: if false;
    }

    /**
     * @description Stores farm information. All data is accessible to every authenticated user.
     * @path /farms/{farmId}
     * @allow get, list: if true;
     * @allow create, update, delete: if isSignedIn();
     * @deny create, update, delete: if !isSignedIn();
     * @principle Open read access, authenticated write access.
     */
    match /farms/{farmId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Stores time-series farm data. All data is accessible to every authenticated user.
     * @path /farms/{farmId}/farmData/{farmDataId}
     * @allow get, list: if true;
     * @allow create, update, delete: if isSignedIn();
     * @deny create, update, delete: if !isSignedIn();
     * @principle Open read access, authenticated write access.
     */
    match /farms/{farmId}/farmData/{farmDataId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Stores farm alerts. All data is accessible to every authenticated user.
     * @path /farms/{farmId}/alerts/{alertId}
     * @allow get, list: if true;
     * @allow create, update, delete: if isSignedIn();
     * @deny create, update, delete: if !isSignedIn();
     * @principle Open read access, authenticated write access.
     */
    match /farms/{farmId}/alerts/{alertId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Stores subscription plan details. Accessible to everyone.
     * @path /subscriptionPlans/{subscriptionPlanId}
     * @allow get, list: if true;
     * @allow create, update, delete: if isAdmin();
     * @deny create, update, delete: if !isAdmin();
     * @principle Public read access, admin-only writes.
     */
    match /subscriptionPlans/{subscriptionPlanId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Stores order information, linking farmers and dealers.
     * @path /orders/{orderId}
     * @allow (get) if isSignedIn() && (isFarmerOrDealer(resource.data.farmerId, resource.data.dealerId) || isAdmin())
     * @allow (list) if isSignedIn()
     * @allow (create) if isSignedIn() && (request.resource.data.farmerId == request.auth.uid || request.resource.data.dealerId == request.auth.uid);
     * @allow (update) if isSignedIn() && (isFarmerOrDealer(resource.data.farmerId, resource.data.dealerId) || isAdmin()) && resource != null
     * @allow (delete) if isSignedIn() && (isFarmerOrDealer(resource.data.farmerId, resource.data.dealerId) || isAdmin()) && resource != null
     * @deny (get, update, delete) if !isSignedIn() || (!isFarmerOrDealer(resource.data.farmerId, resource.data.dealerId) && !isAdmin())
     * @principle Restricts access to orders based on user role (farmer, dealer, admin) and ensures relational integrity.
     */
    match /orders/{orderId} {
      allow get: if isSignedIn() && (isFarmerOrDealer(resource.data.farmerId, resource.data.dealerId) || isAdmin());
      allow list: if isSignedIn();
      allow create: if isSignedIn() && (request.resource.data.farmerId == request.auth.uid || request.resource.data.dealerId == request.auth.uid);
      allow update: if isSignedIn() && (isFarmerOrDealer(resource.data.farmerId, resource.data.dealerId) || isAdmin()) && resource != null;
      allow delete: if isSignedIn() && (isFarmerOrDealer(resource.data.farmerId, resource.data.dealerId) || isAdmin()) && resource != null;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    function isFarmerOrDealer(farmerId, dealerId) {
      return request.auth.uid == farmerId || request.auth.uid == dealerId;
    }
  }
}