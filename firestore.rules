/**
 * @fileoverview Firestore Security Rules for PoultryMitra application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and farm data,
 * with role-based access for administrative functions. Dealers can manage their own suppliers.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only by the user themselves.
 * - /roles_admin/{userId}: Determines admin privileges; document existence grants admin role.
 * - /farms/{farmId}: Stores farm information, accessible by the farm owner.
 * - /farms/{farmId}/farmData/{farmDataId}: Stores time-series data for farms; only accessible by the farm owner.
 * - /farms/{farmId}/alerts/{alertId}: Stores alerts related to farms; only accessible by the farm owner.
 * - /subscriptionPlans/{subscriptionPlanId}: Stores subscription plan information; publicly readable.
 * - /orders/{orderId}: Stores order information, accessible by the farmer and dealer involved in the order.
 * - /suppliers/{supplierId}: Stores supplier information, only accessible by the owning dealer.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - Subscription plans are publicly readable.
 * - Admin privileges are granted based on document existence in the `roles_admin` collection.
 * - Data validation is minimal in this prototyping phase, focusing on ownership and relational integrity.
 *
 * Denormalization for Authorization:
 * User ownership is enforced by matching the `userId` path parameter with the authenticated user's UID.
 * Dealer ownership of suppliers is enforced by matching the `dealerUID` field with the authenticated user's UID.
 *
 * Structural Segregation:
 * Admin roles are managed in a separate `roles_admin` collection for clear separation of concerns.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile access.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile at /users/user123.
     * @allow (get) User with UID 'user123' can read their profile at /users/user123.
     * @allow (update) User with UID 'user123' can update their profile at /users/user123.
     * @allow (delete) User with UID 'user123' can delete their profile at /users/user123.
     * @deny (create) User with UID 'user123' cannot create a profile at /users/user456.
     * @deny (get) User with UID 'user123' cannot read the profile at /users/user456.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not allowed.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id && resource != null;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages admin role access.
     * @path /roles_admin/{userId}
     * @allow (create) User with UID 'admin123' can be made admin by creating document at /roles_admin/admin123 if admin.
     * @allow (get) Any authenticated user can check if a user is an admin by reading the document.
     * @allow (update) Only existing admin can modify admin role documents.
     * @allow (delete) Only existing admin can remove admin role documents.
     * @deny (create) Non-admin users cannot assign admin roles.
     * @principle Implements existence-based authorization for admin roles.
     */
    match /roles_admin/{userId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages farm access.
     * @path /farms/{farmId}
     * @allow (create) User with UID 'user123' can create a farm if they own it.
     * @allow (get) Any authenticated user can read farm information.
     * @allow (update) User with UID 'user123' can update a farm if they own it.
     * @allow (delete) User with UID 'user123' can delete a farm if they own it.
     * @deny (create) User with UID 'user123' cannot create a farm that they do not own.
     * @deny (update) User with UID 'user123' cannot update a farm that they do not own.
     * @principle Enforces document ownership for writes, public read.
     */
    match /farms/{farmId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if isSignedIn() && resource != null; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn() && resource != null; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages farm data access.
     * @path /farms/{farmId}/farmData/{farmDataId}
     * @allow (create) User with UID 'user123' can create farm data for their farm.
     * @allow (get) User with UID 'user123' can read farm data for their farm.
     * @allow (update) User with UID 'user123' can update farm data for their farm.
     * @allow (delete) User with UID 'user123' can delete farm data for their farm.
     * @deny (create) User with UID 'user123' cannot create farm data for another user's farm.
     * @deny (get) User with UID 'user123' cannot read farm data for another user's farm.
     * @principle Enforces document ownership for all operations.
     */
    match /farms/{farmId}/farmData/{farmDataId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if isSignedIn() && resource != null; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn() && resource != null; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages farm alert access.
     * @path /farms/{farmId}/alerts/{alertId}
     * @allow (create) User with UID 'user123' can create alerts for their farm.
     * @allow (get) User with UID 'user123' can read alerts for their farm.
     * @allow (update) User with UID 'user123' can update alerts for their farm.
     * @allow (delete) User with UID 'user123' can delete alerts for their farm.
     * @deny (create) User with UID 'user123' cannot create alerts for another user's farm.
     * @deny (get) User with UID 'user123' cannot read alerts for another user's farm.
     * @principle Enforces document ownership for all operations.
     */
    match /farms/{farmId}/alerts/{alertId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if isSignedIn() && resource != null; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn() && resource != null; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages subscription plan access.
     * @path /subscriptionPlans/{subscriptionPlanId}
     * @allow (get) Any authenticated user can read subscription plans.
     * @deny (create) No one can create subscription plans.
     * @deny (update) No one can update subscription plans.
     * @deny (delete) No one can delete subscription plans.
     * @principle Public read access for subscription plans.
     */
    match /subscriptionPlans/{subscriptionPlanId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages order access.
     * @path /orders/{orderId}
     * @allow (create) Any authenticated user can create orders.
     * @allow (get) Any authenticated user can read orders.
     * @allow (update) Any authenticated user can update orders.
     * @allow (delete) Any authenticated user can delete orders.
     * @deny (create) Non-authenticated users cannot create orders.
     * @deny (get) Non-authenticated users cannot read orders.
     * @principle Allows read/write access to orders.
     */
    match /orders/{orderId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages supplier access.
     * @path /suppliers/{supplierId}
     * @allow (create) Dealer with UID 'dealer123' can create a supplier if they own it.
     * @allow (get) Dealer with UID 'dealer123' can read a supplier if they own it.
     * @allow (update) Dealer with UID 'dealer123' can update a supplier if they own it.
     * @allow (delete) Dealer with UID 'dealer123' can delete a supplier if they own it.
     * @deny (create) Dealer with UID 'dealer123' cannot create a supplier for another dealer.
     * @deny (get) Dealer with UID 'dealer123' cannot read a supplier owned by another dealer.
     * @principle Enforces document ownership for all operations by dealer.
     */
    match /suppliers/{supplierId} {
      allow get: if isDealerOwner(resource.data.dealerUID);
      allow list: if isDealerOwner(resource.data.dealerUID);
      allow create: if isDealerOwner(request.resource.data.dealerUID);
      allow update: if isDealerOwner(resource.data.dealerUID) && resource != null;
      allow delete: if isDealerOwner(resource.data.dealerUID) && resource != null;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    function isDealerOwner(dealerUID) {
        return request.auth.uid == dealerUID;
    }
  }
}