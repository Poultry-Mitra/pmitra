/**
 * @fileoverview Firestore Security Rules for PoultryMitra application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and farm data.
 * Dealers can only manage their own suppliers.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only by the user.
 * - /farms/{farmId}: Stores farm information.
 * - /farms/{farmId}/farmData/{farmDataId}: Stores farm data, accessible only by the farm owner.
 * - /farms/{farmId}/alerts/{alertId}: Stores farm alerts, accessible only by the farm owner.
 * - /subscriptionPlans/{subscriptionPlanId}: Stores subscription plan information (public read).
 * - /orders/{orderId}: Stores order information, readable and writable by the associated farmer and dealer.
 * - /suppliers/{supplierId}: Stores supplier information, accessible only by the dealer who owns the supplier.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Subscription plans are publicly readable.
 * - Ambiguous relationships default to owner-only access.
 *
 * Denormalization for Authorization:
 * - Orders contain both farmerId and dealerId, allowing for simpler authorization checks.
 * - Suppliers contain dealerUID to ensure dealer-specific access.
 *
 * Structural Segregation:
 * - Private user data is stored under /users/{userId}, separate from public data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Users can only read/write their own profile.
     * @path /users/{userId}
     * @allow (create, update, get, list) if the user's UID matches the userId.
     * @deny (create, update, get, list) if the user's UID does not match the userId.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure farm data.
     * @path /farms/{farmId}
     * @allow (get, list) if true (public read).
     * @allow (create, update, delete) if the user is the owner of the farm.
     * @deny (create, update, delete) if the user is not the owner of the farm.
     * @principle Public read, owner-only writes for farm data.
     */
    match /farms/{farmId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Secure farm data entries under a specific farm.
     * @path /farms/{farmId}/farmData/{farmDataId}
     * @allow (get, list) if true (public read).
     * @allow (create, update, delete) if the user is the owner of the farm.
     * @deny (create, update, delete) if the user is not the owner of the farm.
     * @principle Public read, owner-only writes for farm data entries.
     */
    match /farms/{farmId}/farmData/{farmDataId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Secure farm alerts under a specific farm.
     * @path /farms/{farmId}/alerts/{alertId}
     * @allow (get, list) if true (public read).
     * @allow (create, update, delete) if the user is the owner of the farm.
     * @deny (create, update, delete) if the user is not the owner of the farm.
     * @principle Public read, owner-only writes for farm alerts.
     */
    match /farms/{farmId}/alerts/{alertId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Subscription plans are publicly readable.
     * @path /subscriptionPlans/{subscriptionPlanId}
     * @allow (get, list) if true (public read).
     * @deny (create, update, delete) always.
     * @principle Public read, no writes allowed.
     */
    match /subscriptionPlans/{subscriptionPlanId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Orders are readable and writable by associated farmer and dealer.
     * @path /orders/{orderId}
     * @allow (get, list) if the user is the farmer or dealer in the order.
     * @allow (create, update, delete) if the user is the farmer or dealer in the order.
     * @deny (get, list, create, update, delete) if the user is not the farmer or dealer in the order.
     * @principle Shared access for orders between farmers and dealers.
     */
    match /orders/{orderId} {
      allow get: if isFarmerOrDealer(resource.data.farmerId, resource.data.dealerId);
      allow list: if false;
      allow create: if isFarmerOrDealer(request.resource.data.farmerId, request.resource.data.dealerId);
      allow update: if isExistingFarmerOrDealer(resource.data.farmerId, resource.data.dealerId);
      allow delete: if isExistingFarmerOrDealer(resource.data.farmerId, resource.data.dealerId);
    }

    /**
     * @description Suppliers are managed by the dealer who owns them.
     * @path /suppliers/{supplierId}
     * @allow (get, list, create, update, delete) if the user is the dealer who owns the supplier.
     * @deny (get, list, create, update, delete) if the user is not the dealer who owns the supplier.
     * @principle Enforces dealer ownership for suppliers.
     */
    match /suppliers/{supplierId} {
      allow get: if isSupplierOwner(resource.data.dealerUID);
      allow list: if isSupplierOwner(resource.data.dealerUID);
      allow create: if isSupplierOwner(request.resource.data.dealerUID);
      allow update: if isExistingSupplierOwner(resource.data.dealerUID);
      allow delete: if isExistingSupplierOwner(resource.data.dealerUID);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
  }

  function isFarmerOrDealer(farmerId, dealerId) {
    return isSignedIn() && (request.auth.uid == farmerId || request.auth.uid == dealerId);
  }

    function isExistingFarmerOrDealer(farmerId, dealerId) {
    return isSignedIn() && (request.auth.uid == farmerId || request.auth.uid == dealerId) && resource != null;
  }


  function isSupplierOwner(dealerUID) {
    return isSignedIn() && request.auth.uid == dealerUID;
  }

    function isExistingSupplierOwner(dealerUID) {
    return isSignedIn() && request.auth.uid == dealerUID && resource != null;
  }
}