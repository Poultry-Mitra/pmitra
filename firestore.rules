/**
 * @fileoverview Firestore Security Rules for PoultryMitra application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and farm data.
 * Additionally, dealer-specific data like suppliers is secured to prevent unauthorized access.
 * Admin access is granted based on a predefined admin email.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /farms/{farmId}: Stores farm information.
 * - /farms/{farmId}/farmData/{farmDataId}: Stores farm data associated with a farm.
 * - /farms/{farmId}/alerts/{alertId}: Stores farm alerts associated with a farm.
 * - /subscriptionPlans/{subscriptionPlanId}: Stores subscription plan details (public read).
 * - /orders/{orderId}: Stores order information, linking farmers and dealers.
 * - /suppliers/{supplierId}: Stores supplier data, scoped to dealers.
 *
 * Key Security Decisions:
 * - Users can only read/write their own user profile.
 * - Users can only read/write farm data and alerts associated with their farm.
 * - Subscription plans are publicly readable.
 * - Orders can be created by either the farmer or the dealer involved.
 * - Suppliers can only be created and managed by the dealer they belong to.
 * - Listing of all users is disallowed, as indicated by the user's question and the IR.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Authentication required for all protected resources.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces document ownership.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner (signed in, owns the resource, and resource exists).
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Prevents modification of non-existent resources.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

        /**
     * @description Checks if the authenticated user is an admin based on their email.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Grants admin privileges based on verified email.
     */
    function isAdmin() {
        return isSignedIn() && request.auth.token.email == 'ipoultrymitra@gmail.com';
    }
    
    /**
     * @description Security rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' creates their own profile with id='user123'.
     * @allow (get, update, delete) User with UID 'user123' reads/updates/deletes their own profile.
     * @deny (create) User with UID 'user123' attempts to create a profile with id='user456'.
     * @deny (get, update, delete) User with UID 'user123' attempts to read/update/delete profile of user 'user456'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      // User profile creation: Only allow if the authenticated user's ID matches the userId
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      // User profile read: Only allow if the authenticated user's ID matches the userId
      allow get: if isOwner(userId);
      // User profile update: Only allow if the authenticated user's ID matches the userId and the user profile exists
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      // User profile deletion: Only allow if the authenticated user's ID matches the userId and the user profile exists
      allow delete: if isExistingOwner(userId);
      // Disallow listing of all users.
      allow list: if false;
    }

    /**
     * @description Security rules for farm information.
     * @path /farms/{farmId}
     * @allow (create, get, update, delete) Admin users.
     * @deny (create, get, update, delete) Non-admin users.
     * @principle Restricts access to farm data to admins.
     */
    match /farms/{farmId} {
      // Only admins can create, read, update, or delete farms.
      allow create: if isAdmin();
      allow get: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
      allow list: if isAdmin();
    }

    /**
     * @description Security rules for farm data.
     * @path /farms/{farmId}/farmData/{farmDataId}
     * @allow (create) Admin users.
     * @allow (get, update, delete) Admin users.
     * @deny (create, get, update, delete) Non-admin users.
     * @principle Restricts access to farm data to admins.
     */
    match /farms/{farmId}/farmData/{farmDataId} {
        allow create: if isAdmin();
        allow get: if isAdmin();
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
        allow list: if isAdmin();
    }

    /**
     * @description Security rules for farm alerts.
     * @path /farms/{farmId}/alerts/{alertId}
     * @allow (create) Admin users.
     * @allow (get, update, delete) Admin users.
     * @deny (create, get, update, delete) Non-admin users.
     * @principle Restricts access to farm alerts to admins.
     */
    match /farms/{farmId}/alerts/{alertId} {
        allow create: if isAdmin();
        allow get: if isAdmin();
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
        allow list: if isAdmin();
    }

    /**
     * @description Security rules for subscription plans.
     * @path /subscriptionPlans/{subscriptionPlanId}
     * @allow (get, list) Public read access.
     * @deny (create, update, delete) No write access.
     * @principle Provides public read access to subscription plan details.
     */
    match /subscriptionPlans/{subscriptionPlanId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Security rules for orders.
     * @path /orders/{orderId}
     * @allow (create) If the user is either the farmer or the dealer in the order.
     * @allow (get, update, delete) Admin users.
     * @deny (create, get, update, delete) Other users.
     */
    match /orders/{orderId} {
        allow create: if isSignedIn() && (request.resource.data.farmerId == request.auth.uid || request.resource.data.dealerId == request.auth.uid);
        allow get: if isAdmin();
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
        allow list: if isAdmin();
    }

    /**
     * @description Security rules for suppliers.
     * @path /suppliers/{supplierId}
     *  @allow (create) If the supplier is being created by the dealer.
     * @allow (get, update, delete) Admin users.
     * @deny (create, get, update, delete) Other users.
     */
    match /suppliers/{supplierId} {
        allow create: if isSignedIn() && request.resource.data.dealerUID == request.auth.uid;
        allow get: if isAdmin();
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
        allow list: if isAdmin();
    }
  }
}