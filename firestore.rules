/**
 * @fileoverview Firestore Security Rules for PoultryMitra application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and a role-based access control for admins.
 * Farm data is secured under the farm and alerts subcollection, accessible only to authenticated users.
 * Orders are secured to farmer and dealer. Supplier are secured under dealer.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /roles_admin/{userId}: Documents in this collection indicate admin privileges.
 * - /farms/{farmId}: Stores farm information.
 * - /farms/{farmId}/farmData/{farmDataId}: Stores farm data.
 * - /farms/{farmId}/alerts/{alertId}: Stores farm alerts.
 * - /subscriptionPlans/{subscriptionPlanId}: Stores subscription plans.
 * - /orders/{orderId}: Stores order information, including farmerId and dealerId.
 * - /suppliers/{supplierId}: Stores supplier information, nested under dealer id.
 *
 * Key Security Decisions:
 * - User profiles are only accessible and modifiable by the owning user.
 * - Admin privileges are granted based on the presence of a document in the `roles_admin` collection.
 * - Farm data is accessible to any authenticated user.
 * - Listing the `/users` collection is denied to prevent unauthorized access to user data.
 *
 * Denormalization for Authorization:
 * - The security rules avoid `get()` calls by relying on the `request.auth.uid` for user identification.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects against unauthorized access.
     * @path /databases/{database}/documents
     * @allow (get, list) if false
     * @deny (create, update, delete) if true
     * @principle Root match should always deny all requests to protect against unauthorized access.
     */
    match /{document=**} {
      allow read, write: if false;
    }

    /**
     * @description Manages user profiles, allowing users to read and write their own profiles.
     * @path /users/{userId}
     * @allow (get, update, delete) if isSignedIn() && isOwner(userId)
     * @allow (create) if isSignedIn() && isSelfCreation(userId)
     * @allow (list) if false
     * @deny (create) if !isSignedIn() || !isSelfCreation(userId)
     * @deny (update, delete) if !isSignedIn() || !isOwner(userId)
     * @principle Enforces user ownership, allowing only the authenticated user to manage their profile.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isSelfCreation(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages admin user roles, granting access based on document existence.
     * @path /roles_admin/{userId}
     * @allow (get, create, update, delete) if isAdmin()
     * @allow (list) if false
     * @deny (get, create, update, delete) if !isAdmin()
     * @principle Grants admin privileges based on document existence in the `roles_admin` collection.
     */
    match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Manages farm information, accessible to any authenticated user.
     * @path /farms/{farmId}
     * @allow (get, list) if true
     * @allow (create) if isSignedIn()
     * @allow (update, delete) if isSignedIn()
     * @principle Allows public read access to farm information while restricting write access to authenticated users.
     */
    match /farms/{farmId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages farm data, nested under farm, accessible to any authenticated user.
     * @path /farms/{farmId}/farmData/{farmDataId}
     * @allow (get, list) if isSignedIn()
     * @allow (create, update, delete) if isSignedIn()
     * @principle Requires authentication to access farm data, securing sensor readings and other metrics.
     */
    match /farms/{farmId}/farmData/{farmDataId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages farm alerts, nested under farm, accessible to any authenticated user.
     * @path /farms/{farmId}/alerts/{alertId}
     * @allow (get, list) if isSignedIn()
     * @allow (create, update, delete) if isSignedIn()
     * @principle Requires authentication to access farm alerts, ensuring that alerts are only visible to authenticated users.
     */
    match /farms/{farmId}/alerts/{alertId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages subscription plans, publicly accessible.
     * @path /subscriptionPlans/{subscriptionPlanId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if isAdmin()
     * @principle Allows public read access to subscription plans while restricting write access to admins.
     */
    match /subscriptionPlans/{subscriptionPlanId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Manages orders, accessible to farmers and dealers involved in the order.
     * @path /orders/{orderId}
     * @allow (get) if isSignedIn() && (isFarmerOrder(resource.data.farmerId) || isDealerOrder(resource.data.dealerId))
     * @allow (list) if isSignedIn()
     * @allow (create) if isSignedIn() && (isFarmerOrder(request.resource.data.farmerId) || isDealerOrder(request.resource.data.dealerId))
     * @allow (update) if isSignedIn() && (isFarmerOrder(resource.data.farmerId) || isDealerOrder(resource.data.dealerId))
     * @allow (delete) if isSignedIn() && (isFarmerOrder(resource.data.farmerId) || isDealerOrder(resource.data.dealerId))
     * @principle Restricts access to orders based on user role (farmer or dealer).
     */
    match /orders/{orderId} {
      allow get: if isSignedIn() && (isFarmerOrder(resource.data.farmerId) || isDealerOrder(resource.data.dealerId));
      allow list: if isSignedIn();
      allow create: if isSignedIn() && (isFarmerOrder(request.resource.data.farmerId) || isDealerOrder(request.resource.data.dealerId));
      allow update: if isSignedIn() && (isFarmerOrder(resource.data.farmerId) || isDealerOrder(resource.data.dealerId) && resource != null);
      allow delete: if isSignedIn() && (isFarmerOrder(resource.data.farmerId) || isDealerOrder(resource.data.dealerId) && resource != null);
    }

    /**
     * @description Manages suppliers, accessible only to the dealer who owns them.
     * @path /suppliers/{supplierId}
     * @allow (get, list) if isSignedIn() && isDealerSupplier(resource.data.dealerUID)
     * @allow (create) if isSignedIn() && isDealerSupplier(request.resource.data.dealerUID)
     * @allow (update) if isSignedIn() && isDealerSupplier(resource.data.dealerUID) && resource != null
     * @allow (delete) if isSignedIn() && isDealerSupplier(resource.data.dealerUID) && resource != null
     * @principle Restricts access to suppliers based on dealer ownership.
     */
    match /suppliers/{supplierId} {
      allow get, list: if isSignedIn() && isDealerSupplier(resource.data.dealerUID);
      allow create: if isSignedIn() && isDealerSupplier(request.resource.data.dealerUID);
      allow update: if isSignedIn() && isDealerSupplier(resource.data.dealerUID) && resource != null;
      allow delete: if isSignedIn() && isDealerSupplier(resource.data.dealerUID) && resource != null;
    }

    // Helper functions

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId - The user ID to check.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the resource and the document exists.
     * @param {string} userId - The user ID to check.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is creating their own user document.
     * @param {string} userId - The user ID to check.
     * @return {boolean} True if the user is creating their own document, false otherwise.
     */
    function isSelfCreation(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an admin.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Checks if the user is a farmer associated with the order.
     * @param {string} farmerId - The farmer ID to check.
     * @return {boolean} True if the user is a farmer associated with the order, false otherwise.
     */
    function isFarmerOrder(farmerId) {
        return request.auth.uid == farmerId;
    }

    /**
     * @description Checks if the user is a dealer associated with the order.
     * @param {string} dealerId - The dealer ID to check.
     * @return {boolean} True if the user is a dealer associated with the order, false otherwise.
     */
    function isDealerOrder(dealerId) {
        return request.auth.uid == dealerId;
    }

    /**
     * @description Checks if the supplier belongs to the dealer making the request.
     * @param {string} dealerUID - The dealer's UID to check against.
     * @return {boolean} True if the supplier belongs to the dealer, false otherwise.
     */
    function isDealerSupplier(dealerUID) {
      return request.auth.uid == dealerUID;
    }
  }
}