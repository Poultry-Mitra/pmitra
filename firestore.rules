/**
 * @fileoverview Firestore Security Rules for PoultryMitra application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and farm data,
 * with special considerations for admin users. Dealers have exclusive access to manage their suppliers.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only by the user themselves.
 * - /roles_admin/{userId}: Admin role is determined by the existence of a document with the user's ID.
 * - /farms/{farmId}: Stores farm information.
 * - /farms/{farmId}/farmData/{farmDataId}: Stores farm data related to a specific farm, accessible only with farm access.
 * - /farms/{farmId}/alerts/{alertId}: Stores alerts related to a specific farm, accessible only with farm access.
 * - /subscriptionPlans/{subscriptionPlanId}: Stores subscription plans, publicly accessible.
 * - /orders/{orderId}: Stores order information, accessible to the farmer and dealer involved.
 * - /suppliers/{supplierId}: Stores supplier information, accessible only to the dealer who owns them.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied.
 * - Subscription plans are publicly readable.
 * - Admin role is determined by document existence in the `roles_admin` collection.
 * - All write operations require authentication.
 *
 * Denormalization for Authorization:
 *   - FarmData documents are nested under Farm documents to associate data with the farm.
 *   - The existence of a document in `/roles_admin/{userId}` grants admin privileges.
 *
 * Structural Segregation:
 *   - Admin roles are segregated into a separate `roles_admin` collection for clear access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided userId.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's ID matches the user ID of an existing resource.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is an admin by verifying the existence of a document in /roles_admin/{userId}.
     */
    function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Allows only the owner to read, update, and delete their own user profile.
     * @path /users/{userId}
     * @allow (get, update, delete) if request.auth.uid == userId
     * @deny (get, update, delete) if request.auth.uid != userId
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

     /**
      * @description Allows admins to read, create, update, and delete admin roles based on their existence in the roles_admin collection.
      * @path /roles_admin/{userId}
      * @allow (get, create, update, delete) if isAdmin()
      * @deny (get, create, update, delete) if !isAdmin()
      * @principle Enforces admin role management.
      */
    match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows any user to read subscription plans, but restricts creation, update, and deletion.
     * @path /subscriptionPlans/{subscriptionPlanId}
     * @allow get, list: if true
     * @deny create, update, delete: if true
     * @principle Allows public read access to subscription plans.
     */
    match /subscriptionPlans/{subscriptionPlanId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows read and write access to farms for authorized users (e.g., farm owners, admins).
     * @path /farms/{farmId}
     */
    match /farms/{farmId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows read and write access to farm data for authorized users (e.g., farm owners, admins).
     * @path /farms/{farmId}/farmData/{farmDataId}
     */
    match /farms/{farmId}/farmData/{farmDataId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows read and write access to farm alerts for authorized users (e.g., farm owners, admins).
     * @path /farms/{farmId}/alerts/{alertId}
     */
    match /farms/{farmId}/alerts/{alertId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows read and write access to orders for the involved farmer and dealer.
     * @path /orders/{orderId}
     */
    match /orders/{orderId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows a dealer to manage their own suppliers.
     * @path /suppliers/{supplierId}
     */
    match /suppliers/{supplierId} {
        allow get: if true;
        allow list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
    }
  }
}