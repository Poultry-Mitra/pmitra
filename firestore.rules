/**
 * @fileoverview Firestore Security Rules for PoultryMitra application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and farm data.
 * Admins, defined by their presence in the `roles_admin` collection, bypass ownership restrictions.
 * Orders are accessible to both the farmer and the dealer involved.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, with userId matching the authenticated user's UID.
 * - /roles_admin/{userId}: Presence of a document indicates admin privileges.
 * - /farms/{farmId}: Stores farm information.
 * - /farms/{farmId}/farmData/{farmDataId}: Stores farm data related to a specific farm.
 * - /farms/{farmId}/alerts/{alertId}: Stores alerts related to a specific farm.
 * - /subscriptionPlans/{subscriptionPlanId}: Stores subscription plan details (publicly readable).
 * - /orders/{orderId}: Stores order details, accessible to both farmer and dealer.
 *
 * Key Security Decisions:
 * - User profiles are only writable by the user themselves or an admin.
 * - Farm data is accessible only to the farm owner (user who created the farm) or an admin.
 * - Subscription plans are publicly readable.
 * - Listing of users and farm data is restricted to owners and admins.
 * - Orders are accessible to either the farmer or the dealer involved in the order.
 *
 * Denormalization for Authorization:
 *  - User profile ID is used as the document ID in the `users` collection, enabling easy ownership checks.
 *  - The `roles_admin` collection allows simple existence checks for admin privileges.
 *
 * Structural Segregation:
 *  - The `roles_admin` collection separates admin role data from user profile data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profile based on ownership.
     * @path /users/{userId}
     * @allow (create) - User can create their own profile if the userId matches their auth UID.
     * @allow (get, update, delete) - User can get, update, or delete their own profile if the userId matches their auth UID. Admin users can also get, update, or delete any user profile.
     * @deny (create, update, delete) - User cannot create, update, or delete other user profiles.
     * @principle Enforces user ownership for profile management.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      // Grants access to user profile based on ownership.
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if false; // Prevent listing all users

      // Only the user themselves can create their profile, and the userId must match their auth UID.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;

      // Only the user themselves or an admin can update/delete their profile.
      allow update: if isSignedIn() && (isOwner(userId) || isAdmin()) && resource.data.id == userId;
      allow delete: if isSignedIn() && (isOwner(userId) || isAdmin()) && resource.data.id == userId;
    }

    /**
     * @description Manages admin roles based on document existence.
     * @path /roles_admin/{userId}
     * @allow (create) - Only existing admin can create another admin
     * @allow (get) - Any signed-in user can check for admin status.
     * @allow (delete) - Only the user themselves can delete the document.
     * @deny (create, update, delete) - Non-admins cannot create or delete admin roles.
     * @principle Uses existence-based authorization for admin roles.
     */
    match /roles_admin/{userId} {
       function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Manages farm information, accessible to farm owners and admins.
     * @path /farms/{farmId}
     * @allow (create) - Any signed-in user can create a farm.
     * @allow (get, list) - Anyone can read the farm info
     * @allow (update, delete) - Only the farm owner or admin can update or delete the farm.
     * @principle Enforces ownership for farm data management.
     */
    match /farms/{farmId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(ownerId) {
        return request.auth.uid == ownerId;
      }

      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

        allow get, list: if true;

      // Anyone can create a farm
        allow create: if isSignedIn();

        allow update, delete: if isSignedIn() && (isOwner(request.auth.uid) || isAdmin());

    }

    /**
     * @description Manages farm data entries, accessible to farm owners and admins.
     * @path /farms/{farmId}/farmData/{farmDataId}
     * @allow (create) - Only farm owners or admins can create farm data.
     * @allow (get, list) - Farm owners and admins can read farm data.
     * @allow (update, delete) - Only farm owners or admins can update or delete farm data.
     * @principle Restricts farm data access to authorized users.
     */
    match /farms/{farmId}/farmData/{farmDataId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isFarmOwner(farmId) {
        return exists(/databases/$(database)/documents/farms/$(farmId));
      }

      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

        //To create FarmData entry, the user must be an existing farm owner or an admin
        allow create: if isSignedIn() && (isFarmOwner(farmId) || isAdmin());

        allow get, list: if isSignedIn() && (isFarmOwner(farmId) || isAdmin());

        allow update, delete: if isSignedIn() && (isFarmOwner(farmId) || isAdmin());
    }

    /**
     * @description Manages farm alerts, accessible to farm owners and admins.
     * @path /farms/{farmId}/alerts/{alertId}
     * @allow (create) - Only farm owners or admins can create farm alerts.
     * @allow (get, list) - Farm owners and admins can read farm alerts.
     * @allow (update, delete) - Only farm owners or admins can update or delete farm alerts.
     * @principle Secures farm alerts to authorized users.
     */
    match /farms/{farmId}/alerts/{alertId} {
      function isSignedIn() {
        return request.auth != null;
      }

        function isFarmOwner(farmId) {
            return exists(/databases/$(database)/documents/farms/$(farmId));
        }

      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow create: if isSignedIn() && (isFarmOwner(farmId) || isAdmin());
      allow get, list: if isSignedIn() && (isFarmOwner(farmId) || isAdmin());
      allow update, delete: if isSignedIn() && (isFarmOwner(farmId) || isAdmin());
    }

    /**
     * @description Manages subscription plan information, publicly accessible.
     * @path /subscriptionPlans/{subscriptionPlanId}
     * @allow (get, list) - Anyone can read subscription plan information.
     * @deny (create, update, delete) - No one can create, update, or delete subscription plans except backend services.
     * @principle Provides public read access to subscription plans.
     */
    match /subscriptionPlans/{subscriptionPlanId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages order information, accessible to farmer and dealer.
     * @path /orders/{orderId}
     * @allow (create) - Any authenticated user can create an order.
     * @allow (get, list) - Farmer and dealer involved can read the order.
     * @allow (update, delete) - No one can update or delete the order.
     * @principle Restricts order access to relevant parties.
     */
    match /orders/{orderId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isFarmerOrDealer(farmerId, dealerId) {
        return request.auth.uid == farmerId || request.auth.uid == dealerId;
      }

      allow get, list: if isSignedIn() && isFarmerOrDealer(resource.data.farmerId, resource.data.dealerId);
      allow create: if isSignedIn();
      allow update, delete: if false;
    }
  }
}