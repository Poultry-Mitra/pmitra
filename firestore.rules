/**
 * @fileoverview Firestore Security Rules for PoultryMitra application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and farm data.
 * Admins, as determined by their presence in the `roles_admin` collection, have elevated privileges.
 * Data related to farms is nested under the `/farms/{farmId}` path, and supplier information is scoped to each dealer.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only by the user themselves.
 * - /roles_admin/{userId}: Admin user list (existence implies admin role).
 * - /farms/{farmId}: Farm information.
 * - /farms/{farmId}/farmData/{farmDataId}: Time-series data for farms.
 * - /farms/{farmId}/alerts/{alertId}: Real-time alerts for farms.
 * - /subscriptionPlans/{subscriptionPlanId}: Subscription plan details.
 * - /orders/{orderId}: Order information, with farmerId and dealerId.
 * - /suppliers/{supplierId}: Supplier information, scoped to the dealer.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Listing of users is disallowed to protect user privacy.
 * - Only admins can create, update, or delete subscription plans.
 * - Farm data and alerts are restricted to the associated farm.
 * - Dealers can manage their own suppliers.
 * - The default security posture for ambiguous relationships is strict owner-only access.
 *
 * Denormalization for Authorization:
 * The `orders` collection stores both `farmerId` and `dealerId` to avoid needing `get()` calls to `users` to validate order access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId The user ID to compare against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is an existing owner of the resource.
     * @param {string} userId The user ID to compare against.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is an administrator by verifying the existence of a document in roles_admin/{userId}.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Security rules for user profiles.
     * @path /users/{userId}
     * @allow (get) Authenticated user reading their own profile.
     * @allow (create) Authenticated user creating their own profile.
     * @allow (update) Authenticated user updating their own profile.
     * @allow (delete) Authenticated user deleting their own profile.
     * @deny (get) Authenticated user reading another user's profile.
     * @deny (create) Authenticated user creating another user's profile.
     * @deny (update) Authenticated user updating another user's profile.
     * @deny (delete) Authenticated user deleting another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for admin user roles.
     * @path /roles_admin/{userId}
     * @allow (get) Authenticated user reading their own admin role (if exists).
     * @allow (create) Any authenticated user can create their own admin role (for self-nomination). This assumes a background process will validate the request
     * @allow (update) No updates allowed.
     * @allow (delete) Only admins can delete admin roles.
     * @deny (get) Authenticated user reading another user's admin role.
     * @deny (create) Authenticated user creating another user's admin role.
     * @principle Existence in this collection grants admin privileges.
     */
    match /roles_admin/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn(); // Assuming self-nomination
      allow update: if false;
      allow delete: if isAdmin() && isExistingOwner(userId);
    }

    /**
     * @description Security rules for farms.
     * @path /farms/{farmId}
     * @allow (get) Any user can read farm data.
     * @allow (list) Any user can list farms.
     * @allow (create) Only admins can create farms.
     * @allow (update) Only admins can update farms.
     * @allow (delete) Only admins can delete farms.
     * @principle Admins manage farm information.
     */
    match /farms/{farmId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Security rules for farm data.
     * @path /farms/{farmId}/farmData/{farmDataId}
     * @allow (get) Any user can read farm data.
     * @allow (list) Any user can list farm data.
     * @allow (create) Only admins can create farm data.
     * @allow (update) Only admins can update farm data.
     * @allow (delete) Only admins can delete farm data.
     * @principle Admins manage farm data.
     */
    match /farms/{farmId}/farmData/{farmDataId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Security rules for farm alerts.
     * @path /farms/{farmId}/alerts/{alertId}
     * @allow (get) Any user can read farm alerts.
     * @allow (list) Any user can list farm alerts.
     * @allow (create) Only admins can create farm alerts.
     * @allow (update) Only admins can update farm alerts.
     * @allow (delete) Only admins can delete farm alerts.
     * @principle Admins manage farm alerts.
     */
    match /farms/{farmId}/alerts/{alertId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Security rules for subscription plans.
     * @path /subscriptionPlans/{subscriptionPlanId}
     * @allow (get) Any user can read subscription plans.
     * @allow (list) Any user can list subscription plans.
     * @allow (create) Only admins can create subscription plans.
     * @allow (update) Only admins can update subscription plans.
     * @allow (delete) Only admins can delete subscription plans.
     */
    match /subscriptionPlans/{subscriptionPlanId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Security rules for orders.
     * @path /orders/{orderId}
     * @allow (get) Only the farmer or dealer involved in the order can read it.
     * @allow (list) Only the farmer or dealer can list orders related to them.
     * @allow (create) Only farmers or dealers can create orders. The farmerId or dealerId must match the user id.
     * @allow (update) Only the farmer or dealer can update orders related to them.
     * @allow (delete) Only admins can delete orders.
     * @principle Orders are restricted to the involved parties.
     */
    match /orders/{orderId} {
      allow get: if isSignedIn() && (resource.data.farmerId == request.auth.uid || resource.data.dealerId == request.auth.uid);
      allow list: if isSignedIn(); // Allowing signed-in users to list orders. More refined logic may be needed in production.
      allow create: if isSignedIn() && (request.resource.data.farmerId == request.auth.uid || request.resource.data.dealerId == request.auth.uid);
      allow update: if isSignedIn() && (resource.data.farmerId == request.auth.uid || resource.data.dealerId == request.auth.uid) && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Security rules for suppliers.
     * @path /suppliers/{supplierId}
     * @allow (get) Only the dealer who owns the supplier can read it.
     * @allow (list) Only the dealer who owns the supplier can list them.
     * @allow (create) Only a dealer can create a supplier, and the dealerUID must match their UID.
     * @allow (update) Only the dealer who owns the supplier can update it.
     * @allow (delete) Only the dealer who owns the supplier can delete it.
     * @principle Dealers manage their own supplier information.
     */
    match /suppliers/{supplierId} {
      allow get: if isSignedIn() && resource.data.dealerUID == request.auth.uid;
      allow list: if isSignedIn() && resource.data.dealerUID == request.auth.uid;
      allow create: if isSignedIn() && request.resource.data.dealerUID == request.auth.uid;
      allow update: if isSignedIn() && resource.data.dealerUID == request.auth.uid && resource != null;
      allow delete: if isSignedIn() && resource.data.dealerUID == request.auth.uid && resource != null;
    }
  }
}