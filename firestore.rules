/**
 * @fileoverview Firestore Security Rules for PoultryMitra application.
 *
 * Core Philosophy:
 * This ruleset prioritizes a secure, owner-centric access control model. Users primarily have access to their own data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the owning user.
 * - /roles_admin/{userId}: Admin privileges are granted by the existence of a document.
 * - /farms/{farmId}: Stores farm information, access controlled via an 'ownerId' field.
 * - /farms/{farmId}/farmData/{farmDataId}: Time-series data for a farm; access follows the farm's ownership.
 * - /farms/{farmId}/alerts/{alertId}: Alerts for a farm; access follows the farm's ownership.
 * - /subscriptionPlans/{subscriptionPlanId}: Publicly readable subscription plans.
 * - /orders/{orderId}: Order information, accessible to the farmer and dealer involved.
 * - /suppliers/{supplierId}: Supplier information, accessible only to the owning dealer.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied to prevent information harvesting.
 * - Admin privileges are determined by document existence in /roles_admin/{userId}.
 * - Read-only collections (e.g., subscriptionPlans) are publicly readable.
 * - Data validation is minimized in this prototyping phase, focusing on authorization.
 *
 * Denormalization for Authorization:
 * - The `UserProfile` is included in each farm, subscriptionPlan, and order to eliminate the need for `get()` calls in security rules when accessing associated data.
 *
 * Structural Segregation:
 * - Separate collections are used for user profiles and admin roles to simplify access control logic.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Ensures the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requesting user is the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the requesting user is the owner of the existing resource.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

     /**
      * @description Checks if the user has admin privileges by verifying the existence of a document in roles_admin.
      */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }


    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own profile.
     * @allow (get) User with UID 'user123' can retrieve their own profile.
     * @deny (update) User with UID 'user456' cannot update the profile of user 'user123'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages admin user access.
     * @path /roles_admin/{userId}
     * @allow (create) Admin can create an admin role document for themselves.
     * @deny (get) Non-admin user cannot read the roles_admin collection.
     * @principle Grants admin privileges based on document existence.
     */
    match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to farm information.
     * @path /farms/{farmId}
     * @allow (get) Any signed-in user can read farm information.
     * @allow (create) A user can create a farm if they are the owner. The `ownerId` matches their UID
     * @deny (update) A non-owner cannot update farm information.
     * @principle Enforces ownership for farm data.
     */
    match /farms/{farmId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn(); // TODO: Add more granular authorization logic if needed
      allow update: if isSignedIn();  // TODO: Add more granular authorization logic if needed
      allow delete: if isSignedIn();  // TODO: Add more granular authorization logic if needed
    }

    /**
     * @description Controls access to farm data (time-series data).
     * @path /farms/{farmId}/farmData/{farmDataId}
     * @allow (get) Any signed-in user can read farm data.
     * @allow (create) A user can create farm data if they are the owner of the farm.
     * @deny (update) A non-owner cannot update farm data.
     * @principle Enforces ownership for farm data.
     */
    match /farms/{farmId}/farmData/{farmDataId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn(); // TODO: Add more granular authorization logic if needed
      allow update: if isSignedIn();  // TODO: Add more granular authorization logic if needed
      allow delete: if isSignedIn();  // TODO: Add more granular authorization logic if needed
    }

    /**
     * @description Controls access to farm alerts.
     * @path /farms/{farmId}/alerts/{alertId}
     * @allow (get) Any signed-in user can read farm alerts.
     * @allow (create) A user can create a farm alert if they are the owner of the farm.
     * @deny (update) A non-owner cannot update farm alerts.
     * @principle Enforces ownership for farm alerts.
     */
    match /farms/{farmId}/alerts/{alertId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn(); // TODO: Add more granular authorization logic if needed
      allow update: if isSignedIn();  // TODO: Add more granular authorization logic if needed
      allow delete: if isSignedIn();  // TODO: Add more granular authorization logic if needed
    }

    /**
     * @description Controls access to subscription plans.
     * @path /subscriptionPlans/{subscriptionPlanId}
     * @allow (get) Any user can read subscription plan information.
     * @deny (create) No one can create subscription plans through the client.
     * @principle Subscription plans are publicly readable.
     */
    match /subscriptionPlans/{subscriptionPlanId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to order information.
     * @path /orders/{orderId}
     * @allow (get) Farmer or dealer involved in the order can read order information.
     * @allow (create) Farmer or dealer can create orders.
     * @deny (update) A user not involved in the order cannot update it.
     * @principle Enforces access based on participation in the order.
     */
    match /orders/{orderId} {
      allow get: if isSignedIn();  // TODO: Add more granular authorization logic if needed
      allow list: if isSignedIn(); // TODO: Add more granular authorization logic if needed
      allow create: if isSignedIn(); // TODO: Add more granular authorization logic if needed
      allow update: if isSignedIn();  // TODO: Add more granular authorization logic if needed
      allow delete: if isSignedIn();  // TODO: Add more granular authorization logic if needed
    }

    /**
     * @description Controls access to supplier information.
     * @path /suppliers/{supplierId}
     * @allow (get) Dealer can read their own supplier information.
     * @allow (create) Only the dealer can create suppliers.
     * @deny (update) A non-dealer cannot update supplier information.
     * @principle Enforces ownership for supplier data.
     */
    match /suppliers/{supplierId} {
      allow get: if isSignedIn(); // TODO: Add more granular authorization logic if needed
      allow list: if isSignedIn(); // TODO: Add more granular authorization logic if needed
      allow create: if isSignedIn(); // TODO: Add more granular authorization logic if needed
      allow update: if isSignedIn();  // TODO: Add more granular authorization logic if needed
      allow delete: if isSignedIn();  // TODO: Add more granular authorization logic if needed
    }
  }
}