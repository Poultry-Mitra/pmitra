/**
 * @fileoverview Firestore Security Rules for PoultryMitra application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and farm data.
 * Admins, as determined by their presence in the `roles_admin` collection, have elevated privileges.
 * Data related to farms is nested under the `/farms/{farmId}` document, allowing for granular access control.
 * Dealers are authorized to manage suppliers they own.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /roles_admin/{userId}: Indicates admin status by document existence.
 * - /farms/{farmId}: Stores farm information.
 * - /farms/{farmId}/farmData/{farmDataId}: Stores time-series farm data.
 * - /farms/{farmId}/alerts/{alertId}: Stores alerts related to farms.
 * - /subscriptionPlans/{subscriptionPlanId}: Stores subscription plan details.
 * - /orders/{orderId}: Stores order information, linking farmers and dealers.
 * - /suppliers/{supplierId}: Stores supplier information, specific to dealers.
 *
 * Key Security Decisions:
 * - Users can only read/write their own user profile.
 * - Only admins can create, update, and delete user profiles.
 * - Farm data and alerts are restricted to the owner of the farm.
 * - Subscription plans are publicly readable, but only admins can modify them.
 * - Orders are restricted to the involved farmer and dealer.
 * - Dealers can manage their own suppliers.
 * - User listing is denied to prevent information leakage.
 *
 * Denormalization for Authorization:
 * No specific denormalization is required as document ownership checks are straightforward.  The `roles_admin` collection acts as a form of denormalization, allowing admin status to be checked via document existence.
 *
 * Structural Segregation:
 * Admin users are segregated into the `roles_admin` collection, allowing for easy role-based access control without needing a field within the `users` documents.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles. Users can only read/write their own profile. Admins can create, update, and delete any profile. Listing users is prohibited.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if isOwner(userId)
     * @deny (get) if !isSignedIn()
     * @deny (list) Always denied to protect user data.
     * @deny (create, update, delete) if !isOwner(userId) && !isAdmin()
     * @principle Enforces document ownership for writes and restricts listing.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages admin user roles. Existence of a document grants admin privileges.
     * @path /roles_admin/{userId}
     * @allow (get) if isAdmin()
     * @allow (create) if isAdmin()
     * @allow (update) if isAdmin()
     * @allow (delete) if isAdmin()
     * @deny (get, create, update, delete) if !isAdmin()
     * @deny (list) Always denied.
     * @principle Restricts admin role management to existing admins.
     */
    match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to farm information.  Farm data is restricted to the owner of the farm.
     * @path /farms/{farmId}
     * @allow (get, list) if true;
     * @allow (create) if request.auth.uid != null; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow (update, delete) if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny (create, update, delete) if true;
     * @principle Enforces document ownership for writes.
     */
    match /farms/{farmId} {
      allow get, list: if true;
      allow create: if isSignedIn(); // TODO: The 'Farm' entity is missing an 'ownerId' or 'authorId' field.
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to time-series farm data. Data is restricted to the owner of the farm.
     * @path /farms/{farmId}/farmData/{farmDataId}
     * @allow (get, list) if true;
     * @allow (create) if request.auth.uid != null; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow (update, delete) if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny (create, update, delete) if true;
     * @principle Enforces document ownership for writes.
     */
    match /farms/{farmId}/farmData/{farmDataId} {
      allow get, list: if true;
      allow create: if isSignedIn(); // TODO: The 'FarmData' entity is missing an 'ownerId' or 'authorId' field.
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

     /**
      * @description Controls access to alerts for a specific farm. Alerts are restricted to the owner of the farm.
      * @path /farms/{farmId}/alerts/{alertId}
      * @allow (get, list) if true;
      * @allow (create) if request.auth.uid != null; // TODO: Add owner validation once the schema is updated with an ownership field.
      * @allow (update, delete) if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      * @deny (create, update, delete) if true;
      * @principle Enforces document ownership for writes.
      */
    match /farms/{farmId}/alerts/{alertId} {
      allow get, list: if true;
      allow create: if isSignedIn(); // TODO: The 'FarmAlert' entity is missing an 'ownerId' or 'authorId' field.
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to subscription plans.  Subscription plans are publicly readable, but only admins can modify them.
     * @path /subscriptionPlans/{subscriptionPlanId}
     * @allow (get, list) if true;
     * @allow (create) if isAdmin();
     * @allow (update) if isAdmin();
     * @allow (delete) if isAdmin();
     * @deny (create, update, delete) if !isAdmin()
     * @principle Restricts modification of subscription plans to admins.
     */
    match /subscriptionPlans/{subscriptionPlanId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to order information. Orders are restricted to the involved farmer and dealer.
     * @path /orders/{orderId}
     * @allow (get) if get(/databases/$(database)/documents/orders/$(orderId)).data.farmerId == request.auth.uid || get(/databases/$(database)/documents/orders/$(orderId)).data.dealerId == request.auth.uid;
     * @allow (list) if true;
     * @allow (create) if request.auth.uid != null; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow (update, delete) if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny (create, update, delete) if true;
     * @principle Restricts access to orders to the involved parties.
     */
    match /orders/{orderId} {
      allow get: if get(/databases/$(database)/documents/orders/$(orderId)).data.farmerId == request.auth.uid || get(/databases/$(database)/documents/orders/$(orderId)).data.dealerId == request.auth.uid;
      allow list: if true;
      allow create: if isSignedIn(); // TODO: The 'Order' entity is missing an 'ownerId' or 'authorId' field.
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to supplier information. Dealers can manage their own suppliers.
     * @path /suppliers/{supplierId}
     * @allow (get) if get(/databases/$(database)/documents/suppliers/$(supplierId)).data.dealerUID == request.auth.uid;
     * @allow (list) if true;
     * @allow create: if request.auth.uid != null; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow update: if get(/databases/$(database)/documents/suppliers/$(supplierId)).data.dealerUID == request.auth.uid;
     * @allow delete: if get(/databases/$(database)/documents/suppliers/$(supplierId)).data.dealerUID == request.auth.uid;
     * @deny (create, update, delete) if true;
     * @principle Restricts access to suppliers to the owning dealer.
     */
    match /suppliers/{supplierId} {
        allow get: if get(/databases/$(database)/documents/suppliers/$(supplierId)).data.dealerUID == request.auth.uid;
        allow list: if true;
        allow create: if request.auth.uid != null; // TODO: The 'Supplier' entity is missing an 'ownerId' or 'authorId' field.
        allow update: if get(/databases/$(database)/documents/suppliers/$(supplierId)).data.dealerUID == request.auth.uid;
        allow delete: if get(/databases/$(database)/documents/suppliers/$(supplierId)).data.dealerUID == request.auth.uid;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }
  }
}