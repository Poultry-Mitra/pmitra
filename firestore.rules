/**
 * @fileoverview Firestore Security Rules for PoultryMitra application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and farm-related data.
 * Orders are secured based on farmer/dealer relationships. Suppliers are secured on dealer ownership.
 * Access to farm data and alerts is restricted to the farm owner.
 * Read access to subscription plans is public.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.  Each user can only access their own profile.
 * - /farms/{farmId}: Stores farm information.
 * - /farms/{farmId}/farmData/{farmDataId}: Stores time-series data for farms. Accessible only by the farm owner.
 * - /farms/{farmId}/alerts/{alertId}: Stores alerts for farms. Accessible only by the farm owner.
 * - /subscriptionPlans/{subscriptionPlanId}: Stores information about subscription plans. Publicly readable.
 * - /orders/{orderId}: Stores order information, enforcing farmer/dealer relationship.
 * - /suppliers/{supplierId}: Stores supplier information, accessible only by the dealer who owns the supplier record.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Admin role is determined by checking the user's email against a hardcoded value.
 * - Read-only access is granted to the subscriptionPlans collection.
 *
 * Denormalization for Authorization:
 *  - Order documents need to include both `farmerId` and `dealerId` for easy authorization.
 *  - Supplier documents need to include `dealerUID` for easy authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description: Controls access to user profiles.
     * @path: /users/{userId}
     * @allow: User with UID 'user123' can create their profile if request.auth.uid == 'user123' (create).
     * @allow: User with UID 'user123' can read their profile (get).
     * @allow: User with UID 'user123' can list their profile (list).
     * @allow: User with UID 'user123' can update their profile (update).
     * @allow: User with UID 'user123' can delete their profile (delete).
     * @deny: User with UID 'user456' cannot read user profile 'user123' (get).
     * @deny: User with UID 'user456' cannot create user profile 'user123' (create).
     * @principle: Enforces user ownership for profile data.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId); // Enforce immutability of userId.
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description: Controls access to farm information.
     * @path: /farms/{farmId}
     * @allow: User with UID 'user123' can create a farm if they are the owner.
     * @allow: User with UID 'user123' can read a farm if they are the owner.
     * @allow: User with UID 'user123' can update a farm if they are the owner.
     * @allow: User with UID 'user123' can delete a farm if they are the owner.
     * @deny: User with UID 'user456' cannot read farm 'farm123'.
     * @principle: Enforces farm ownership.
     */
    match /farms/{farmId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && resource.data.ownerId == request.auth.uid;
      allow list: if false;

      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if isSignedIn() && resource.data.ownerId == request.auth.uid; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn() && resource.data.ownerId == request.auth.uid; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description: Controls access to farm data for a specific farm.
     * @path: /farms/{farmId}/farmData/{farmDataId}
     * @allow: Farm owner can read farm data.
     * @allow: Farm owner can write farm data.
     * @deny: Non-farm owner cannot read/write farm data.
     * @principle: Enforces farm ownership for data access.
     */
    match /farms/{farmId}/farmData/{farmDataId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isFarmOwner(farmId) {
           return get(/databases/$(database)/documents/farms/$(farmId)).data.ownerId == request.auth.uid;
      }

      allow get: if isSignedIn() && isFarmOwner(farmId);
      allow list: if false;
      allow create: if isSignedIn() && isFarmOwner(farmId); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if isSignedIn() && isFarmOwner(farmId); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn() && isFarmOwner(farmId); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description: Controls access to alerts for a specific farm.
     * @path: /farms/{farmId}/alerts/{alertId}
     * @allow: Farm owner can read alerts.
     * @allow: Farm owner can write farm data.
     * @deny: Non-farm owner cannot read/write farm data.
     * @principle: Enforces farm ownership for alert access.
     */
    match /farms/{farmId}/alerts/{alertId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isFarmOwner(farmId) {
           return get(/databases/$(database)/documents/farms/$(farmId)).data.ownerId == request.auth.uid;
      }

      allow get: if isSignedIn() && isFarmOwner(farmId);
      allow list: if false;
      allow create: if isSignedIn() && isFarmOwner(farmId); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if isSignedIn() && isFarmOwner(farmId); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn() && isFarmOwner(farmId); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description: Controls access to subscription plans.
     * @path: /subscriptionPlans/{subscriptionPlanId}
     * @allow: Any user can read subscription plans.
     * @deny: No user can create, update, or delete subscription plans (only admins can).
     * @principle: Public read access with restricted write access.
     */
    match /subscriptionPlans/{subscriptionPlanId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description: Controls access to orders between farmers and dealers.
     * @path: /orders/{orderId}
     * @allow: Farmer or dealer involved in the order can read the order.
     * @allow: Farmer or dealer involved in the order can create the order.
     * @allow: Farmer or dealer involved in the order can update the order.
     * @allow: Farmer or dealer involved in the order can delete the order.
     * @deny: User not involved in the order cannot access it.
     * @principle: Enforces access based on farmer/dealer relationship.
     */
    match /orders/{orderId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && (resource.data.farmerId == request.auth.uid || resource.data.dealerId == request.auth.uid);
      allow list: if false; // Intentionally deny listing all orders.

      allow create: if isSignedIn() && (request.resource.data.farmerId == request.auth.uid || request.resource.data.dealerId == request.auth.uid);
      allow update: if isSignedIn() && (request.resource.data.farmerId == request.auth.uid || request.resource.data.dealerId == request.auth.uid);
      allow delete: if isSignedIn() && (resource.data.farmerId == request.auth.uid || resource.data.dealerId == request.auth.uid);
    }

    /**
     * @description: Controls access to supplier information.
     * @path: /suppliers/{supplierId}
     * @allow: Dealer can create, read, update, and delete their own supplier information.
     * @deny: Other users cannot access a dealer's supplier information.
     * @principle: Enforces dealer ownership for supplier data.
     */
    match /suppliers/{supplierId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && resource.data.dealerUID == request.auth.uid;
      allow list: if false;

      allow create: if isSignedIn() && request.resource.data.dealerUID == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.dealerUID == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.dealerUID == request.auth.uid;
    }
  }
}