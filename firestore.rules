/**
 * @fileoverview Firestore Security Rules for PoultryMitra application.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of ownership-based access control and
 * role-based access control (using the `roles_admin` collection). User data
 * is primarily accessible to the owning user, while administrators have
 * broader access.
 *
 * Data Structure:
 * - /userProfiles/{userId}: Stores user profile data, accessible primarily to the user.
 * - /roles_admin/{userId}: Document existence grants admin privileges to the user.
 * - /farms/{farmId}: Stores farm data, accessible to the farm owner (user who created the farm).
 * - /farms/{farmId}/farmData/{farmDataId}: Time-series farm data, accessible to the farm owner.
 * - /farms/{farmId}/alerts/{alertId}: Farm alerts, accessible to the farm owner.
 * - /subscriptionPlans/{subscriptionPlanId}: Stores subscription plan data, publicly readable.
 * - /orders/{orderId}: Stores order information, accessible to the farmer or dealer involved.
 *
 * Key Security Decisions:
 * - User listing is denied to prevent information disclosure.
 * - Subscription plans are publicly readable.
 * - All write operations require authentication.
 *
 * Denormalization for Authorization:
 * The UserProfile is denormalized on farms, subscriptionPlans and orders. This eliminates the need for `get()` calls
 * in security rules when accessing associated farm data or dealing with orders related to a user.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is from an authenticated user.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID and resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is an admin by verifying the existence of a document in the roles_admin collection.
     */
    function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rule for the userProfiles collection.
     * @path /userProfiles/{userProfileId}
     * @allow (create) - User with UID 'user123' can create a profile if request.auth.uid == 'user123'.
     * @allow (get) - User with UID 'user123' can get their own profile (userProfileId == 'user123').
     * @allow (update) - User with UID 'user123' can update their profile (userProfileId == 'user123').
     * @allow (delete) - User with UID 'user123' can delete their own profile (userProfileId == 'user123').
     * @deny (create) - User with UID 'user456' cannot create a profile for 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /userProfiles/{userProfileId} {
      allow get: if isOwner(userProfileId);
      allow list: if false; // Listing user profiles is not permitted.
      allow create: if isOwner(userProfileId) && request.resource.data.id == userProfileId;
      allow update: if isExistingOwner(userProfileId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userProfileId);
    }

      /**
       * @description Rule for the roles_admin collection.
       * @path /roles_admin/{userId}
       * @allow (create) - Anyone with valid authentication can create this document. Existence confers admin rights.
       * @allow (get) - Only admins can read who the admins are.
       * @allow (update) - Only admins can update who the admins are.
       * @allow (delete) - Only admins can delete who the admins are.
       * @deny (create) - Non-authenticated users cannot create admin roles.
       * @principle Existence of a document in this collection grants admin privileges.
       */
    match /roles_admin/{userId} {
        allow get: if isAdmin();
        allow list: if false;
        allow create: if isSignedIn();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

    /**
     * @description Rule for the farms collection.
     * @path /farms/{farmId}
     * @allow (create) - Authenticated user can create a farm.
     * @allow (get) - Any authenticated user can read farm data.
     * @allow (update) - Only the owner can update the farm.
     * @allow (delete) - Only the owner can delete the farm.
     * @deny (create) - Unauthenticated users cannot create farms.
     * @principle Authenticated users can create farms, but only owners can update or delete.
     */
    match /farms/{farmId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rule for the farmData subcollection.
     * @path /farms/{farmId}/farmData/{farmDataId}
     * @allow (create) - Only the farm owner can create farm data.
     * @allow (get) - Only the farm owner can retrieve farm data.
     * @allow (update) - Only the farm owner can update farm data.
     * @allow (delete) - Only the farm owner can delete farm data.
     * @deny (create) - Non-owners cannot create farm data.
     * @principle Restricts farm data access to the farm owner.
     */
    match /farms/{farmId}/farmData/{farmDataId} {
      allow get: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow list: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rule for the alerts subcollection.
     * @path /farms/{farmId}/alerts/{alertId}
     * @allow (create) - Only the farm owner can create alerts.
     * @allow (get) - Only the farm owner can retrieve alerts.
     * @allow (update) - Only the farm owner can update alerts (e.g., mark as read).
     * @allow (delete) - Only the farm owner can delete alerts.
     * @deny (create) - Non-owners cannot create alerts.
     * @principle Restricts alert access to the farm owner.
     */
    match /farms/{farmId}/alerts/{alertId} {
      allow get: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow list: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rule for the subscriptionPlans collection.
     * @path /subscriptionPlans/{subscriptionPlanId}
     * @allow (get) - Any user can read subscription plans.
     * @deny (create, update, delete) - Only admins can create, update, or delete subscription plans.
     * @principle Publicly readable, admin-managed.
     */
    match /subscriptionPlans/{subscriptionPlanId} {
      allow get, list: if true; // Publicly readable.
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rule for the orders collection.
     * @path /orders/{orderId}
     * @allow (create) - Authenticated users can create orders.
     * @allow (get) - Farmer or dealer can retrieve their order
     * @allow (update) - Farmer or dealer can update their order
     * @allow (delete) - Only admins can delete orders.
     * @deny (create) - Unauthenticated users cannot create orders.
     * @principle Authenticated users can create orders, but only admins can delete.
     */
    match /orders/{orderId} {
      allow get: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow list: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow create: if isSignedIn();
      allow update: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isAdmin();
    }
  }
}