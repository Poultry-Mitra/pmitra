/**
 * @fileoverview Firestore Security Rules for PoultryMitra application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on user roles (admin, farmer, dealer) and relationships (ownership, association).
 * It enforces strict authorization, especially for write operations, while remaining flexible on data shapes for rapid iteration.
 *
 * Data Structure:
 * - /userProfiles/{userId}: Stores user profile information. User-owned.
 * - /roles_admin/{userId}: Presence grants admin privileges.
 * - /farms/{farmId}: Stores farm information.
 * - /farms/{farmId}/farmData/{farmDataId}: Time-series farm data. Farm-owned.
 * - /farms/{farmId}/alerts/{alertId}: Farm-specific alerts. Farm-owned.
 * - /subscriptionPlans/{subscriptionPlanId}: Stores subscription plan details. Public read.
 * - /orders/{orderId}: Stores order information, linking farmers and dealers.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Admin privileges are granted based on document existence in the /roles_admin collection.
 * - Read-only access to /subscriptionPlans is granted to all users.
 * - Data validation is limited to relational integrity checks (owner IDs) to allow for rapid schema iteration.
 *
 * Denormalization for Authorization:
 * - User role and ownership are explicitly encoded in the data and paths to minimize the need for `get()` calls in rules.
 *
 * Structural Segregation:
 * - Private user data is stored under /userProfiles/{userId}, while public data (e.g., subscription plans) is stored in top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Authentication.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Ownership.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner of the resource.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Ownership and Existence.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is an admin by verifying document existence in /roles_admin/{userId}.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Role-based access control.
     */
    function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for user profiles.
     * @path /userProfiles/{userProfileId}
     * @allow (create) A user creating their own profile.
     * @allow (get) A user reading their own profile.
     * @allow (update) A user updating their own profile.
     * @allow (delete) A user deleting their own profile.
     * @deny (create) A user creating a profile for another user.
     * @deny (update) A user updating another user's profile.
     * @deny (delete) A user deleting another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /userProfiles/{userProfileId} {
      allow get: if isOwner(userProfileId);
      allow list: if false;
      allow create: if isOwner(userProfileId) && request.resource.data.id == userProfileId;
      allow update: if isExistingOwner(userProfileId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userProfileId);
    }

    /**
     * @description Rules for admin roles.  Admin role is granted by existence of a document
     * @path /roles_admin/{userId}
     */
    match /roles_admin/{userId} {
        allow get: if isAdmin();
        allow list: if false;
        allow create: if isAdmin();
        allow update: if false; // No updates allowed, only create or delete to grant/revoke role.
        allow delete: if isAdmin();
    }


    /**
     * @description Rules for farms.
     * @path /farms/{farmId}
     * @allow (get) Any signed-in user can read farm data.
     * @allow (create) Only an admin can create a new farm.
     * @allow (update) Only an admin can update a farm.
     * @allow (delete) Only an admin can delete a farm.
     * @deny (create) Non-admins cannot create farms.
     * @deny (update) Non-admins cannot update farms.
     *
     * @principle Admin-controlled access for farm management.
     */
    match /farms/{farmId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for farm data.
     * @path /farms/{farmId}/farmData/{farmDataId}
     * @allow (get) Any signed-in user can read farm data.
     * @allow (create) Only an admin can create new farm data.
     * @allow (update) Only an admin can update farm data.
     * @allow (delete) Only an admin can delete farm data.
     * @deny (create) Non-admins cannot create farm data.
     * @deny (update) Non-admins cannot update farm data.
     *
     * @principle Admin-controlled access for farm data management.
     */
    match /farms/{farmId}/farmData/{farmDataId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for farm alerts.
     * @path /farms/{farmId}/alerts/{alertId}
     * @allow (get) Any signed-in user can read farm alerts.
     * @allow (create) Only an admin can create a new farm alert.
     * @allow (update) Only an admin can update a farm alert.
     * @allow (delete) Only an admin can delete a farm alert.
     * @deny (create) Non-admins cannot create farm alerts.
     * @deny (update) Non-admins cannot update farm alerts.
     *
     * @principle Admin-controlled access for alert management.
     */
    match /farms/{farmId}/alerts/{alertId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for subscription plans.
     * @path /subscriptionPlans/{subscriptionPlanId}
     * @allow (get) Any user can read subscription plans.
     * @deny (create) No one can create subscription plans via the client.
     *
     * @principle Public read access for subscription plans.
     */
    match /subscriptionPlans/{subscriptionPlanId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for orders.
     * @path /orders/{orderId}
     *  A farmer or dealer can create an order if the farmerId or dealerId match the user's ID
     */
    match /orders/{orderId} {
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if isSignedIn() && (request.resource.data.farmerId == request.auth.uid || request.resource.data.dealerId == request.auth.uid);
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
    }
  }
}