/**
 * @fileoverview Firestore Security Rules for PoultryMitra application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on user roles (admin, farmer, dealer) and data ownership.
 * It enforces strict ownership for user profiles and farm data, while providing controlled access to subscription plans and orders.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only by the user themselves and admins.
 * - /roles_admin/{userId}: Indicates admin privileges; document existence grants admin role.
 * - /farms/{farmId}: Stores farm information.
 * - /farms/{farmId}/farmData/{farmDataId}: Stores farm data, accessible only by the farm owner and admins.
 * - /farms/{farmId}/alerts/{alertId}: Stores farm alerts, accessible only by the farm owner and admins.
 * - /subscriptionPlans/{subscriptionPlanId}: Stores subscription plan details, publicly readable.
 * - /orders/{orderId}: Stores order information, accessible to associated farmer, dealer, and admins.
 * - /suppliers/{supplierId}: Stores supplier information, accessible to the dealer who owns them.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied to protect user privacy.
 * - Subscription plans are publicly readable.
 * - Admin privileges are determined by document existence in the /roles_admin collection.
 * - All write operations are protected by authorization checks.
 *
 * Denormalization for Authorization:
 *  N/A
 * Structural Segregation:
 *  N/A
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) Signed-in user can create their own profile if the userId matches their auth UID.
     * @allow (get, update, delete) Signed-in user can access/modify their own profile if the userId matches their auth UID.
     * @deny (create, get, update, delete) If the userId does not match the authenticated user's ID.
     * @deny (list) Listing all users is not permitted.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages admin user roles based on document existence.
     * @path /roles_admin/{userId}
     * @allow (create) Only admins can create admin user roles.
     * @allow (get) Any signed-in user can check for admin status.
     * @allow (update, delete) Only admins can modify or delete admin user roles.
     * @deny (list) Listing all admins is not permitted.
     * @principle Uses existence-based authorization for admin roles.
     */
    match /roles_admin/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

     function isAdmin() {
        return get(/databases/$(database)/documents/roles_admin/$(request.auth.uid)).data.exists;
      }

      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to farm documents.
     * @path /farms/{farmId}
     * @allow (create) Signed-in user can create a farm.
     * @allow (get, update, delete) Signed-in user can access/modify their own farm.
     * @deny (list) No listing of farms.
     * @principle Enforces document ownership for farms.
     */
    match /farms/{farmId} {
      function isSignedIn() {
        return request.auth != null;
      }

     function isAdmin() {
        return get(/databases/$(database)/documents/roles_admin/$(request.auth.uid)).data.exists;
      }

      allow get: if isSignedIn() || isAdmin();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn() || isAdmin();
      allow delete: if isSignedIn() || isAdmin();

      match /farmData/{farmDataId} {

        /**
         * @description Controls access to farm data documents within a specific farm.
         * @path /farms/{farmId}/farmData/{farmDataId}
         * @allow (create) Signed-in user can create farm data for their farm.
         * @allow (get, update, delete) Signed-in user can access/modify their own farm data.
         * @deny (list) No listing of farm data.
         * @principle Enforces document ownership for farm data.
         */
          function isSignedIn() {
            return request.auth != null;
          }

           function isAdmin() {
            return get(/databases/$(database)/documents/roles_admin/$(request.auth.uid)).data.exists;
          }

          allow get: if isSignedIn() || isAdmin();
          allow list: if false;
          allow create: if isSignedIn();
          allow update: if isSignedIn() || isAdmin();
          allow delete: if isSignedIn() || isAdmin();
      }

       match /alerts/{alertId} {
          /**
           * @description Controls access to farm alert documents within a specific farm.
           * @path /farms/{farmId}/alerts/{alertId}
           * @allow (create) Signed-in user can create alerts for their farm.
           * @allow (get, update, delete) Signed-in user can access/modify their own farm alerts.
           * @deny (list) No listing of farm alerts.
           * @principle Enforces document ownership for farm alerts.
           */
            function isSignedIn() {
                return request.auth != null;
            }

            function isAdmin() {
              return get(/databases/$(database)/documents/roles_admin/$(request.auth.uid)).data.exists;
            }

            allow get: if isSignedIn() || isAdmin();
            allow list: if false;
            allow create: if isSignedIn();
            allow update: if isSignedIn() || isAdmin();
            allow delete: if isSignedIn() || isAdmin();
        }
    }

    /**
     * @description Controls access to subscription plan documents.
     * @path /subscriptionPlans/{subscriptionPlanId}
     * @allow (get, list) Anyone can read subscription plans.
     * @deny (create, update, delete) Only admins can modify subscription plans.
     * @principle Allows public read access for subscription plans.
     */
    match /subscriptionPlans/{subscriptionPlanId} {
      function isAdmin() {
        return get(/databases/$(database)/documents/roles_admin/$(request.auth.uid)).data.exists;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to order documents.
     * @path /orders/{orderId}
     * @allow (create) Signed-in users can create new orders.
     * @allow (get, update, delete) Only the farmer, dealer, or an admin can manage the order.
     * @deny (list) No listing of order.
     * @principle Restricts access to orders based on user role and ownership.
     */
    match /orders/{orderId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return get(/databases/$(database)/documents/roles_admin/$(request.auth.uid)).data.exists;
      }

      allow get: if isSignedIn() || isAdmin();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn() || isAdmin();
      allow delete: if isSignedIn() || isAdmin();
    }

    /**
     * @description Controls access to supplier documents.
     * @path /suppliers/{supplierId}
     * @allow (create) Only dealers can create suppliers.
     * @allow (get, update, delete) Only the dealer who owns the supplier can manage it.
     * @deny (list) No listing of suppliers.
     * @principle Enforces dealer ownership for supplier management.
     */
    match /suppliers/{supplierId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isDealerOwner(dealerUID) {
        return request.auth.uid == dealerUID;
      }

      function isExistingDealerOwner(dealerUID) {
          return isDealerOwner(dealerUID) && resource != null;
      }

      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isExistingDealerOwner(resource.data.dealerUID);
      allow delete: if isExistingDealerOwner(resource.data.dealerUID);
    }
  }
}