rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the document, based on the userId.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is an admin.
     */
    function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User with auth UID matching the userId can create their profile.
     * @allow (get, update, delete) User with auth UID matching the userId can get, update, and delete their profile. Admins can also get, update, and delete.
     * @deny (create) User with mismatched auth UID tries to create a profile.
     * @deny (get, update, delete) User tries to access another user's profile without being an admin.
     * @principle Enforces user-ownership and admin override for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false; // Listing user documents is disallowed.
      allow create: if isOwner(userId) && request.auth.uid == userId;
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isOwner(userId) || isAdmin();
    }

     /**
      * @description Rules for admin roles.  Existence of a document grants admin privileges.
      * @path /roles_admin/{userId}
      * @allow (create) Only someone with a specific secret can create admin roles initially
      * @allow (get) Anyone who is an admin can get it
      * @allow (update) No one should be able to update once created
      * @allow (delete) Admins can delete other admins.
      * @deny (create) Regular users cannot create admin roles.
      * @deny (update) No one should be able to update once created
      * @principle Admin role management through document existence.
      */
     match /roles_admin/{userId} {
        allow get: if isAdmin();
        allow list: if false;
        allow create: if false; //CRITICAL:  In a real application you'd want to lock this down more
        allow update: if false; //No updates allowed
        allow delete: if isAdmin();
     }

    /**
     * @description Rules for farms.
     * @path /farms/{farmId}
     * @allow (get, list) Anyone can read farm information.
     * @allow (create, update, delete) Only admins can create, update, and delete farm information.
     * @deny (create, update, delete) Non-admins try to modify farm information.
     * @principle Public read, admin-only write for farm data.
     */
    match /farms/{farmId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for farm data.
     * @path /farms/{farmId}/farmData/{farmDataId}
     * @allow (get, list) Anyone can read farm data.
     * @allow (create, update, delete) Only admins can create, update, and delete farm data.
     * @deny (create, update, delete) Non-admins try to modify farm data.
     * @principle Public read, admin-only write for farm data.
     */
    match /farms/{farmId}/farmData/{farmDataId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for farm alerts.
     * @path /farms/{farmId}/alerts/{alertId}
     * @allow (get, list) Anyone can read farm alerts.
     * @allow (create, update, delete) Only admins can create, update, and delete farm alerts.
     * @deny (create, update, delete) Non-admins try to modify farm alerts.
     * @principle Public read, admin-only write for farm alerts.
     */
    match /farms/{farmId}/alerts/{alertId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for subscription plans.
     * @path /subscriptionPlans/{subscriptionPlanId}
     * @allow (get, list) Anyone can read subscription plan information.
     * @allow (create, update, delete) Only admins can create, update, and delete subscription plan information.
     * @deny (create, update, delete) Non-admins try to modify subscription plan information.
     * @principle Public read, admin-only write for subscription plans.
     */
    match /subscriptionPlans/{subscriptionPlanId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for orders.
     * @path /orders/{orderId}
     * @allow (get) Farmer or Dealer in the order can read.
     * @allow (create) Farmer or Dealer can create.
     * @allow (update, delete) Only admins can update and delete orders.
     * @deny (get) Someone who is not farmer or dealer of the order.
     * @deny (create) Someone who is not farmer or dealer tries to create the order.
     * @principle Access control based on farmerId and dealerId in the order.
     */
    match /orders/{orderId} {
      allow get: if (resource.data.farmerId == request.auth.uid) || (resource.data.dealerId == request.auth.uid) || isAdmin();
      allow list: if false;
      allow create: if (request.resource.data.farmerId == request.auth.uid) || (request.resource.data.dealerId == request.auth.uid);
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for suppliers.
     * @path /suppliers/{supplierId}
     * @allow (get, list, create, update, delete) Only the dealer who owns the supplier can manage it.
     * @deny (get, list, create, update, delete) Other users try to access or modify suppliers.
     * @principle Dealer-ownership for supplier management.
     */
    match /suppliers/{supplierId} {
      allow get: if resource.data.dealerUID == request.auth.uid;
      allow list: if false;
      allow create: if request.resource.data.dealerUID == request.auth.uid;
      allow update: if request.resource.data.dealerUID == request.auth.uid;
      allow delete: if request.resource.data.dealerUID == request.auth.uid;
    }
  }
}