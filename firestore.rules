/**
 * @fileoverview Firestore Security Rules for PoultryMitra application.
 *
 * Core Philosophy:
 * This ruleset prioritizes a secure, owner-centric access control model.
 * Users have full control over their own profile data, while access to
 * other data (farms, orders, etc.) is determined by explicit ownership
 * or role-based authorization.  Admin privileges are granted based on
 * document existence in the `roles_admin` collection.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /roles_admin/{userId}: Indicates admin privileges; document existence grants access.
 * - /farms/{farmId}: Stores farm information.
 * - /farms/{farmId}/farmData/{farmDataId}: Time-series data for farms.
 * - /farms/{farmId}/alerts/{alertId}: Alerts related to farms.
 * - /subscriptionPlans/{subscriptionPlanId}: Stores subscription plan details.
 * - /orders/{orderId}: Stores order information, linking farmers and dealers.
 * - /suppliers/{supplierId}: Stores supplier data for dealers.
 *
 * Key Security Decisions:
 * - User profiles are private and only accessible to the owning user.
 * - Listing of all users is disallowed to protect user privacy.
 * - Admin privileges are determined by presence in the `roles_admin` collection.
 * - Farms and related data are accessible only to authorized users (owners, admins).
 * - Suppliers are accessible only to the owning dealer.
 *
 * Denormalization for Authorization:
 *  - Where possible, the rules use denormalized data to avoid costly `get()` calls.
 *    For example, rules for accessing farm alerts can directly check ownership
 *    based on the `farmId` field within the alert document.
 *
 * Structural Segregation:
 * - The `roles_admin` collection is structurally segregated from the `users`
 *   collection to clearly delineate admin privileges from general user data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Manages user profiles, restricting access to the owning user.
     * @path /users/{userId}
     * @allow (create) User creates their own profile with matching userId.
     * @allow (get, update, delete) User with matching userId accesses their profile.
     * @deny (create) User attempts to create a profile with a mismatched userId.
     * @deny (list) Listing all users is not permitted.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id; // Enforce immutability of userId
      allow delete: if isExistingOwner(userId);
    }

     /**
      * @description Manages the roles_admin collection for granting admin privileges.
      * @path /roles_admin/{userId}
      * @allow (create) Only someone already in the roles_admin collection can add new admins.
      * @allow (get) Any authenticated user can check if a user is an admin by attempting to read the document
      * @allow (delete) An admin can be removed by an existing admin.
      * @deny (create) Non-admins are not allowed to create admin roles.
      * @deny (list) Listing all admins is not permitted.
      * @principle Existence in this collection grants admin access.
      */
    match /roles_admin/{userId} {
        allow get: if isSignedIn();
        allow list: if false;
        allow create: if isAdmin();
        allow update: if false;
        allow delete: if isAdmin();
    }

    /**
     * @description Manages farm information.
     * @path /farms/{farmId}
     * @allow (get, list) Any authenticated user can read farm information.
     * @allow (create) Only admins can create new farms.
     * @allow (update, delete) Only admins can update or delete farm information.
     * @deny (create, update, delete) Non-admins are not allowed to modify farm information.
     * @principle Requires admin privileges for write operations.
     */
    match /farms/{farmId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages time-series farm data, restricting write access to admins.
     * @path /farms/{farmId}/farmData/{farmDataId}
     * @allow (get, list) Any authenticated user can read farm data.
     * @allow (create) Only admins can create new farm data entries.
     * @allow (update, delete) Only admins can update or delete farm data entries.
     * @deny (create, update, delete) Non-admins are not allowed to modify farm data.
     * @principle Requires admin privileges for write operations.
     */
    match /farms/{farmId}/farmData/{farmDataId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages alerts for farms, restricting write access to admins.
     * @path /farms/{farmId}/alerts/{alertId}
     * @allow (get, list) Any authenticated user can read farm alerts.
     * @allow (create) Only admins can create new farm alerts.
     * @allow (update) Any authenticated user can update the `isRead` status.
     * @allow (delete) Only admins can delete farm alerts.
     * @deny (create, delete) Non-admins are not allowed to create or delete alerts.
     * @principle Requires admin privileges for write operations except for `isRead` updates.
     */
    match /farms/{farmId}/alerts/{alertId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages subscription plan information, accessible to all users.
     * @path /subscriptionPlans/{subscriptionPlanId}
     * @allow (get, list) Any authenticated user can read subscription plans.
     * @allow (create) Only admins can create new subscription plans.
     * @allow (update, delete) Only admins can update or delete subscription plans.
     * @deny (create, update, delete) Non-admins are not allowed to modify subscription plans.
     * @principle Requires admin privileges for write operations.
     */
    match /subscriptionPlans/{subscriptionPlanId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages order information, accessible to admins or the involved users.
     * @path /orders/{orderId}
     * @allow (get) Any authenticated user can read order data.
     * @allow (list) Only admins can list all orders.
     * @allow (create) Any authenticated user can create orders.
     * @allow (update, delete) Only admins can update or delete order information.
     * @deny (update, delete) Non-admins are not allowed to modify order information.
     * @principle Requires admin privileges for update and delete operations.
     */
    match /orders/{orderId} {
      allow get: if isSignedIn();
      allow list: if isAdmin();
      allow create: if isSignedIn();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages supplier information, ensuring only the owning dealer can access.
     * @path /suppliers/{supplierId}
     * @allow (get, list) Only the dealer who owns the supplier document can access it.
     * @allow (create) Only the dealer can create supplier document.
     * @allow (update, delete) Only the owning dealer can modify or delete supplier information.
     * @deny (create, update, delete) Non-dealers are not allowed to create or modify supplier information.
     * @principle Enforces ownership for suppliers.
     */
    match /suppliers/{supplierId} {
      allow get, list: if request.auth.uid == resource.data.dealerUID;
      allow create: if isSignedIn() && request.resource.data.dealerUID == request.auth.uid;
      allow update: if request.auth.uid == resource.data.dealerUID && resource != null;
      allow delete: if request.auth.uid == resource.data.dealerUID && resource != null;
    }
  }
}