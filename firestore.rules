rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Restricts access to user profiles to the owner.
     * @path /users/{userId}
     * @allow (get, create, update, delete, list) if the user is the owner.
     * @deny (get, list) if the user is not signed in.
     * @deny (create, update, delete) if the user is not the owner.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Determines admin privileges based on document existence in this collection.
     * @path /roles_admin/{userId}
     * @allow (get, create, update, delete, list) if the user is an admin.
     * @deny all requests if the user is not an admin.
     * @principle Grants admin privileges based on document existence.
     */
    match /roles_admin/{userId} {
      function isAdmin() {
        return request.auth != null && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Restricts access to farm information to the owner.
     * @path /farms/{farmId}
     * @allow (get, create, update, delete, list) if the user is the owner of the farm.
     * @deny (get, list) if the user is not signed in.
     * @deny (create, update, delete) if the user is not the owner.
     * @principle Enforces document ownership for all operations.
     */
    match /farms/{farmId} {
      allow get: if request.auth != null;
      allow list: if false;
      allow create: if request.auth != null && request.resource.data.keys().hasAll(['ownerId']) && request.resource.data.ownerId == request.auth.uid; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if request.auth != null && request.resource.data.keys().hasAll(['ownerId']) && request.resource.data.ownerId == request.auth.uid; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if request.auth != null && request.resource.data.keys().hasAll(['ownerId']) && request.resource.data.ownerId == request.auth.uid; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Restricts access to farm data to the owner of the farm.
     * @path /farms/{farmId}/farmData/{farmDataId}
     * @allow (get, create, update, delete, list) if the user is the owner of the farm.
     * @deny (get, list) if the user is not signed in.
     * @deny (create, update, delete) if the user is not the owner.
     * @principle Enforces document ownership for all operations.
     */
    match /farms/{farmId}/farmData/{farmDataId} {
      function isFarmOwner(farmId) {
          return request.auth != null && get(/databases/$(database)/documents/farms/$(farmId)).data.ownerId == request.auth.uid;
      }

      allow get: if request.auth != null && isFarmOwner(farmId);
      allow list: if false;
      allow create: if request.auth != null && isFarmOwner(farmId); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if request.auth != null && isFarmOwner(farmId); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if request.auth != null && isFarmOwner(farmId); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Restricts access to farm alerts to the owner of the farm.
     * @path /farms/{farmId}/alerts/{alertId}
     * @allow (get, create, update, delete, list) if the user is the owner of the farm.
     * @deny (get, list) if the user is not signed in.
     * @deny (create, update, delete) if the user is not the owner.
     * @principle Enforces document ownership for all operations.
     */
    match /farms/{farmId}/alerts/{alertId} {
      function isFarmOwner(farmId) {
          return request.auth != null && get(/databases/$(database)/documents/farms/$(farmId)).data.ownerId == request.auth.uid;
      }
      allow get: if request.auth != null && isFarmOwner(farmId);
      allow list: if false;
      allow create: if request.auth != null && isFarmOwner(farmId); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if request.auth != null && isFarmOwner(farmId); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if request.auth != null && isFarmOwner(farmId); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to subscription plans, but restricts write access to admins only.
     * @path /subscriptionPlans/{subscriptionPlanId}
     * @allow (get, list) to everyone.
     * @allow (create, update, delete) to admins only.
     * @deny (create, update, delete) to non-admins.
     * @principle Provides public information while securing write access.
     */
    match /subscriptionPlans/{subscriptionPlanId} {
      function isAdmin() {
        return request.auth != null && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Restricts access to orders to the farmer and dealer involved.
     * @path /orders/{orderId}
     * @allow (get, create, update, delete, list) if the user is the farmer or dealer in the order.
     * @deny (get, list) if the user is not signed in.
     * @deny (create, update, delete) if the user is not the farmer or dealer in the order.
     * @principle Enforces access based on participation in the order.
     */
    match /orders/{orderId} {
        function isFarmerOrDealer() {
            return request.auth != null && (resource.data.farmerId == request.auth.uid || resource.data.dealerId == request.auth.uid);
        }
        allow get: if request.auth != null && isFarmerOrDealer();
        allow list: if false;
        allow create: if request.auth != null && request.resource.data.keys().hasAll(['farmerId', 'dealerId']) && (request.resource.data.farmerId == request.auth.uid || request.resource.data.dealerId == request.auth.uid); // TODO: Add owner validation once the schema is updated with an ownership field.
        allow update: if request.auth != null && isFarmerOrDealer(); // TODO: Add owner validation once the schema is updated with an ownership field.
        allow delete: if request.auth != null && isFarmerOrDealer(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

      /**
       * @description Restricts access to suppliers to the owning dealer.
       * @path /suppliers/{supplierId}
       * @allow (get, create, update, delete, list) if the user is the owner dealer.
       * @deny (get, list) if the user is not signed in.
       * @deny (create, update, delete) if the user is not the owner dealer.
       */
      match /suppliers/{supplierId} {
          function isDealerOwner() {
              return request.auth != null && resource.data.dealerUID == request.auth.uid;
          }

          allow get: if request.auth != null && isDealerOwner();
          allow list: if false;
          allow create: if request.auth != null && request.resource.data.keys().hasAll(['dealerUID']) && request.resource.data.dealerUID == request.auth.uid; // TODO: Add owner validation once the schema is updated with an ownership field.
          allow update: if request.auth != null && isDealerOwner(); // TODO: Add owner validation once the schema is updated with an ownership field.
          allow delete: if request.auth != null && isDealerOwner(); // TODO: Add owner validation once the schema is updated with an ownership field.
      }
  }
}