/**
 * @fileoverview Firestore Security Rules for PoultryMitra application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure user-owned data access with some public read access where appropriate, and role-based authorization for administrative functions.
 * It enforces strict ownership for user profiles and farm-related data, ensuring that only authenticated users can access their own information.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only to the authenticated user.
 * - /roles_admin/{userId}: Determines admin status based on document existence.
 * - /farms/{farmId}: Stores farm information.
 * - /farms/{farmId}/farmData/{farmDataId}: Stores farm data, accessible only to the farm owner.
 * - /farms/{farmId}/alerts/{alertId}: Stores alerts for a farm, accessible only to the farm owner.
 * - /subscriptionPlans/{subscriptionPlanId}: Stores subscription plans, publicly readable.
 * - /orders/{orderId}: Stores order information, accessible to the farmer and dealer involved.
 * - /suppliers/{supplierId}: Stores supplier information, accessible only to the dealer who owns the supplier record.
 *
 * Key Security Decisions:
 * - User listing is disallowed for privacy.
 * - Admin privileges are determined by the existence of a document in the `roles_admin` collection.
 * - Public read access is granted to the `subscriptionPlans` collection.
 * - The default security posture for ambiguous relationships is strict owner-only access.
 *
 * Denormalization for Authorization:
 * The rules leverage denormalization of UserProfile.id into Farm documents to avoid costly `get()` calls in security rules.
 *
 * Structural Segregation:
 * There is no need for structural segregation now, but it could be used for public and private data in the future.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Authentication is required for nearly all operations.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces user ownership for data access.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is an existing owner of the document.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Ensures that only existing owners can update or delete documents.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user is an admin.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Checks the `roles_admin` collection for admin privileges.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create a profile with ID 'user123'.
     * @allow (get) User with UID 'user123' can read their own profile.
     * @allow (update) User with UID 'user123' can update their own profile.
     * @allow (delete) User with UID 'user123' can delete their own profile.
     * @deny (create) User with UID 'user456' cannot create a profile with ID 'user123'.
     * @deny (get) User with UID 'user456' cannot read the profile of user 'user123'.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, validates relational integrity between documents.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // User listing is not allowed.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id; // Enforce immutability of userId on update
      allow delete: if isExistingOwner(userId);
    }

     /**
      * @description Rules for admin roles.
      * @path /roles_admin/{userId}
      * @allow (create) Only admins can create admin role documents.
      * @allow (get) Any authenticated user can check for admin status.
      * @allow (update) No one can update admin role documents.
      * @allow (delete) Only admins can delete admin role documents.
      * @deny (create) Non-admins cannot create admin role documents.
      * @deny (delete) Non-admins cannot delete admin role documents.
      * @principle Uses existence-based authorization to manage admin privileges.
      */
    match /roles_admin/{userId} {
        allow get: if isSignedIn();
        allow list: if false;
        allow create: if isAdmin();
        allow update: if false;
        allow delete: if isAdmin();
    }

    /**
     * @description Rules for farm data.
     * @path /farms/{farmId}
     * @allow (create) Authenticated user can create a farm.
     * @allow (get) Any authenticated user can read farm data.
     * @allow (update) Only the owner can update the farm data.
     * @allow (delete) Only the owner can delete the farm data.
     * @deny (create) Non-authenticated user cannot create farm data.
     * @deny (update) Non-owner cannot update the farm data.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /farms/{farmId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for farm data entries.
     * @path /farms/{farmId}/farmData/{farmDataId}
     * @allow (create) Authenticated user can create farm data entries under their farm.
     * @allow (get) Any authenticated user can read farm data entries.
     * @allow (update) Only the owner can update the farm data entries.
     * @allow (delete) Only the owner can delete the farm data entries.
     * @deny (create) Non-authenticated user cannot create farm data entries.
     * @deny (update) Non-owner cannot update the farm data entries.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /farms/{farmId}/farmData/{farmDataId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for farm alerts.
     * @path /farms/{farmId}/alerts/{alertId}
     * @allow (create) Authenticated user can create farm alerts under their farm.
     * @allow (get) Any authenticated user can read farm alerts.
     * @allow (update) Only the owner can update the farm alerts.
     * @allow (delete) Only the owner can delete the farm alerts.
     * @deny (create) Non-authenticated user cannot create farm alerts.
     * @deny (update) Non-owner cannot update the farm alerts.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /farms/{farmId}/alerts/{alertId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for subscription plans.
     * @path /subscriptionPlans/{subscriptionPlanId}
     * @allow (get) Any user can read subscription plans.
     * @deny (create) Only admins can create subscription plans.
     * @deny (update) Only admins can update subscription plans.
     * @deny (delete) Only admins can delete subscription plans.
     * @principle Allows public read access to subscription plans, restricts write access to admins.
     */
    match /subscriptionPlans/{subscriptionPlanId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for orders.
     * @path /orders/{orderId}
     * @allow (create) Authenticated users can create orders.
     * @allow (get) Authenticated users can read orders if they are the farmer or the dealer in the order.
     * @allow (update) Only the farmer or dealer involved can update the order.
     * @allow (delete) Only the farmer or dealer involved can delete the order.
     * @deny (create) Non-authenticated users cannot create orders.
     *
     * @principle Restricts order access to the farmer and dealer involved in the order.
     */
    match /orders/{orderId} {
      allow get, list: if isSignedIn() && (resource.data.farmerId == request.auth.uid || resource.data.dealerId == request.auth.uid);
      allow create: if isSignedIn();
      allow update: if isSignedIn() && (resource.data.farmerId == request.auth.uid || resource.data.dealerId == request.auth.uid);
      allow delete: if isSignedIn() && (resource.data.farmerId == request.auth.uid || resource.data.dealerId == request.auth.uid);
    }

    /**
     * @description Rules for suppliers.
     * @path /suppliers/{supplierId}
     * @allow (create) Authenticated users can create suppliers if they are dealers.
     * @allow (get) Authenticated users can read suppliers if they are the owner dealer.
     * @allow (update) Only the owner dealer can update the supplier.
     * @allow (delete) Only the owner dealer can delete the supplier.
     * @deny (create) Non-dealers cannot create suppliers.
     * @deny (update) Non-owner dealers cannot update the supplier.
     * @principle Enforces ownership for suppliers, restricts access to the dealer who owns the supplier record.
     */
    match /suppliers/{supplierId} {
        allow get, list: if isSignedIn() && resource.data.dealerUID == request.auth.uid;
        allow create: if isSignedIn() && request.resource.data.dealerUID == request.auth.uid;
        allow update: if isExistingOwner(resource.data.dealerUID) && request.resource.data.dealerUID == resource.data.dealerUID;
        allow delete: if isExistingOwner(resource.data.dealerUID);
    }
  }
}