/**
 * @fileoverview Firestore Security Rules for PoultryMitra application.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model, combined with ownership checks where applicable.
 * User profiles are private and only accessible to the owner. Farms and related data are publicly readable but only
 * writable by authorized users (either the farm owner or an admin). Orders are accessible to both the farmer and dealer involved.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, only accessible to the user themselves.
 * - /roles_admin/{userId}: Documents here grant admin privileges to the user.
 * - /farms/{farmId}: Stores farm data, publicly readable.
 * - /farms/{farmId}/farmData/{farmDataId}: Stores time-series data for a farm, publicly readable.
 * - /farms/{farmId}/alerts/{alertId}: Stores alerts for a farm, publicly readable.
 * - /subscriptionPlans/{subscriptionPlanId}: Stores subscription plan information, publicly readable.
 * - /orders/{orderId}: Stores order information, accessible to farmer and dealer.
 *
 * Key Security Decisions:
 * - Users can only read/write their own profile data.
 * - Public read access to farms and related data is granted to allow open data access and visualization.
 * - Admin privileges are granted based on document existence in the `roles_admin` collection.
 * - Orders are accessible to both the farmer and dealer involved.
 * - User listing is disallowed.
 *
 * Denormalization for Authorization:
 * The `orders` collection stores order details, including the `farmerId` and `dealerId` for linking orders to specific users.
 * This denormalization allows direct authorization without additional `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their profile.
     * @allow (get, update, delete) User with matching UID can access/modify their profile.
     * @deny (create) User cannot create a profile with a different UID.
     * @deny (get, update, delete) User cannot access/modify another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

        /**
         * @description Controls access to admin user role assignments.
         * @path /roles_admin/{userId}
         * @allow (create) Only admins can create admin user assignments.
         * @allow (get) Any authenticated user can check for admin status.
         * @allow (delete) Only admins can remove admin user assignments.
         * @deny (create, delete) Non-admins cannot create or delete admin user assignments.
         * @deny (list, update) Listing and updating is disallowed for this collection.
         * @principle Uses existence of document to grant admin privileges.
         */
    match /roles_admin/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
          return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to farm data.
     * @path /farms/{farmId}
     * @allow (get, list) Public read access is allowed for all farm data.
     * @deny (create, update, delete) Only admins can create, update, or delete farm data.
     * @principle Grants public read access and restricts write access to admins.
     */
    match /farms/{farmId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
          return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to time-series farm data.
     * @path /farms/{farmId}/farmData/{farmDataId}
     * @allow (get, list) Public read access is allowed for all farm data.
     * @deny (create, update, delete) Only admins can create, update, or delete farm data.
     * @principle Grants public read access and restricts write access to admins.
     */
    match /farms/{farmId}/farmData/{farmDataId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
          return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to farm alerts.
     * @path /farms/{farmId}/alerts/{alertId}
     * @allow (get, list) Public read access is allowed for all farm alerts.
     * @deny (create, update, delete) Only admins can create, update, or delete farm alerts.
     * @principle Grants public read access and restricts write access to admins.
     */
    match /farms/{farmId}/alerts/{alertId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
          return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to subscription plan data.
     * @path /subscriptionPlans/{subscriptionPlanId}
     * @allow (get, list) Public read access is allowed for subscription plan data.
     * @deny (create, update, delete) Only admins can create, update, or delete subscription plan data.
     * @principle Grants public read access and restricts write access to admins.
     */
    match /subscriptionPlans/{subscriptionPlanId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
          return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to order data.
     * @path /orders/{orderId}
     * @allow (get) Farmer or dealer involved in the order can read the order.
     * @deny (create, update, delete) Only the farmer or dealer involved in the order can create, update, or delete orders.
     * @principle Restricts access to order data to the involved parties.
     */
    match /orders/{orderId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isFarmerOrDealer(farmerId, dealerId) {
        return isSignedIn() && (request.auth.uid == farmerId || request.auth.uid == dealerId);
      }

      allow get: if isFarmerOrDealer(resource.data.farmerId, resource.data.dealerId);
      allow list: if false;
      allow create: if isSignedIn() && (request.auth.uid == request.resource.data.farmerId || request.auth.uid == request.resource.data.dealerId);
      allow update: if isSignedIn() && (request.auth.uid == resource.data.farmerId || request.auth.uid == resource.data.dealerId);
      allow delete: if isSignedIn() && (request.auth.uid == resource.data.farmerId || request.auth.uid == resource.data.dealerId);
    }
  }
}