/**
 * @fileoverview Firestore Security Rules for PoultryMitra application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on user roles and ownership.
 * It implements an owner-only access model for user-specific data and restricts
 * data modification to authorized users.  It uses denormalization where appropriate
 * to make authorization checks simple and efficient.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles.  Access is restricted to the owner.
 * - /farms/{farmId}: Stores farm information.
 * - /farms/{farmId}/farmData/{farmDataId}: Stores farm data.
 * - /farms/{farmId}/alerts/{alertId}: Stores farm alerts.
 * - /subscriptionPlans/{subscriptionPlanId}: Stores subscription plan information. Publicly readable.
 * - /orders/{orderId}: Stores order information.
 * - /suppliers/{supplierId}: Stores supplier information, specific to dealers.
 *
 * Key Security Decisions:
 * - User profiles are strictly private (owner-only).
 * - Subscription plans are publicly readable.
 * - Admin role is determined by a direct check of the user's email in the security rules.
 * - Listing of all users is disallowed for privacy reasons.
 * - Public read access is enabled for SubscriptionPlans.
 *
 * Denormalization for Authorization:
 * - The security rules assume that the `id` field within the `/users/{userId}` document
 *   matches the `userId` path parameter.  This is enforced on create and update to
 *   prevent inconsistencies.
 * - Similarly for `suppliers/{supplierId}`, the `dealerUID` field should match the UID
 *   of the authenticated dealer.
 *
 * Structural Segregation:
 * - There is no need for structural segregation in this model.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource.
     * @param {string} userId - The user ID to compare with the request's auth UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the owner of the resource AND it exists.
     * @param {string} userId - The user ID to compare with the request's auth UID.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the current user is an admin based on their email.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
        return isSignedIn() && (request.auth.token.email == 'poultrymitra@gmail.com' || request.auth.token.email == 'sales@keggfarms.com');
    }

    /**
     * @description Rule for documents in the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own profile.
     * @deny (create) User with UID 'user123' cannot create a profile with a different ID.
     * @allow (get) User with UID 'user123' can read their own profile.
     * @deny (get) User with UID 'user123' cannot read another user's profile.
     * @allow (update) User with UID 'user123' can update their own profile.
     * @deny (update) User with UID 'user123' cannot update another user's profile.
     * @allow (delete) User with UID 'user123' can delete their own profile.
     * @deny (delete) User with UID 'user123' cannot delete another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Listing all users is not permitted

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id; // Enforce immutability of userId
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for documents in the /farms/{farmId} collection.
     * @path /farms/{farmId}
     * @allow (get) Any signed-in user can read farm information.
     * @allow (list) Any signed-in user can list farm information.
     * @deny (create) Only admins can create new farms.
     * @deny (update) Only admins can update farm information.
     * @deny (delete) Only admins can delete farm information.
     * @principle Restricts farm management to administrators.
     */
    match /farms/{farmId} {
        allow get, list: if isSignedIn();
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

    /**
     * @description Rule for documents in the /farms/{farmId}/farmData/{farmDataId} collection.
     * @path /farms/{farmId}/farmData/{farmDataId}
     * @allow (get) Any signed-in user can read farm data.
     * @allow (list) Any signed-in user can list farm data.
     * @deny (create) Only admins can create new farm data entries.
     * @deny (update) Only admins can update farm data entries.
     * @deny (delete) Only admins can delete farm data entries.
     * @principle Restricts farm data management to administrators.
     */
    match /farms/{farmId}/farmData/{farmDataId} {
        allow get, list: if isSignedIn();
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

    /**
     * @description Rule for documents in the /farms/{farmId}/alerts/{alertId} collection.
     * @path /farms/{farmId}/alerts/{alertId}
     * @allow (get) Any signed-in user can read farm alerts.
     * @allow (list) Any signed-in user can list farm alerts.
     * @deny (create) Only admins can create new farm alerts.
     * @deny (update) Only admins can update farm alerts.
     * @deny (delete) Only admins can delete farm alerts.
     * @principle Restricts farm alert management to administrators.
     */
    match /farms/{farmId}/alerts/{alertId} {
        allow get, list: if isSignedIn();
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

    /**
     * @description Rule for documents in the /subscriptionPlans/{subscriptionPlanId} collection.
     * @path /subscriptionPlans/{subscriptionPlanId}
     * @allow (get) Any user can read subscription plan information.
     * @allow (list) Any user can list subscription plan information.
     * @deny (create) Only admins can create new subscription plans.
     * @deny (update) Only admins can update subscription plans.
     * @deny (delete) Only admins can delete subscription plans.
     * @principle Subscription plans are publicly readable, but only admins can modify them.
     */
    match /subscriptionPlans/{subscriptionPlanId} {
        allow get, list: if true;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

    /**
     * @description Rule for documents in the /orders/{orderId} collection.
     * @path /orders/{orderId}
     * @allow (get) Any signed-in user can read order information.
     * @allow (list) Any signed-in user can list order information.
     * @deny (create) Only admins can create new orders.
     * @deny (update) Only admins can update orders.
     * @deny (delete) Only admins can delete orders.
     */
    match /orders/{orderId} {
        allow get, list: if isSignedIn();
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

     /**
      * @description Rule for documents in the /suppliers/{supplierId} collection.
      * @path /suppliers/{supplierId}
      * @allow (get) A dealer can get their own supplier's information.
      * @deny (get) A dealer cannot get another dealer's supplier information.
      * @allow (list) A dealer can list their own suppliers.
      * @deny (list) A dealer cannot list another dealer's suppliers.
      * @allow (create) A dealer can create a supplier.
      * @deny (create) A user who is not a dealer cannot create a supplier.
      * @allow (update) A dealer can update their own supplier's information.
      * @deny (update) A dealer cannot update another dealer's supplier information.
      * @allow (delete) A dealer can delete their own supplier.
      * @deny (delete) A dealer cannot delete another dealer's supplier.
      * @principle Only the dealer that owns the supplier can access/modify the supplier's data.
      */
    match /suppliers/{supplierId} {
        allow get: if isSignedIn() && resource.data.dealerUID == request.auth.uid;
        allow list: if isSignedIn() && resource.data.dealerUID == request.auth.uid;
        allow create: if isSignedIn() && request.resource.data.dealerUID == request.auth.uid;
        allow update: if isSignedIn() && resource.data.dealerUID == request.auth.uid;
        allow delete: if isSignedIn() && resource.data.dealerUID == request.auth.uid;
    }
  }
}