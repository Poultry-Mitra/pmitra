/**
 * @fileoverview Firestore Security Rules for PoultryMitra application.
 *
 * Core Philosophy:
 * This ruleset prioritizes strong authorization based on user roles (admin, farmer, dealer) and ownership,
 * while allowing flexible data shapes for rapid prototyping. It focuses on securing access to data based on the
 * authenticated user's identity and role within the application.  It implements an admin role via the `roles_admin`
 * collection, where the existence of a document grants admin privileges to the corresponding user.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only to the user themselves.
 * - /roles_admin/{userId}: Documents in this collection denote admin users.
 * - /farms/{farmId}: Stores farm information.
 * - /farms/{farmId}/farmData/{farmDataId}: Stores farm data, only accessible to the farm owner.
 * - /farms/{farmId}/alerts/{alertId}: Stores farm alerts, only accessible to the farm owner.
 * - /subscriptionPlans/{subscriptionPlanId}: Stores subscription plan details. Publicly readable.
 * - /orders/{orderId}: Stores order information, accessible to the farmer or dealer involved.
 * - /suppliers/{supplierId}: Stores supplier information, accessible only to the dealer who owns the supplier record.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied to protect user privacy.
 * - Subscription plans are publicly readable.
 * - Data validation is minimized in favor of authorization checks. The prototyping philosophy emphasizes access control
 *   over strict data schema enforcement.
 * - Ownership is enforced for farms, farm data, alerts, and suppliers.
 * - Implemented an admin role via document existence in the `roles_admin` collection.
 * - Denormalization is used where possible to simplify rules and improve performance.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if request.auth.uid == userId
     * @deny (get, create, update, delete) if request.auth.uid != userId
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows admins to read and write admin roles.  Existence of a document in this path
     *              grants admin privileges.
     * @path /roles_admin/{userId}
     * @allow (get, create, update, delete) if isAdmin()
     * @deny (get, create, update, delete) if !isAdmin()
     * @principle Existence-based authorization for admin roles.
     */
    match /roles_admin/{userId} {
        function isAdmin() {
            return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
        }
      allow get: if isAdmin();
      allow list: if false; // Listing admins is not permitted.
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows anyone to read subscription plan information, but only admins can create, update, or delete plans.
     * @path /subscriptionPlans/{subscriptionPlanId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if isAdmin()
     * @deny (create, update, delete) if !isAdmin()
     * @principle Public read access with admin-only writes.
     */
    match /subscriptionPlans/{subscriptionPlanId} {
        function isAdmin() {
            return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
        }
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows reading and writing farm information to the owner of the farm.
     * @path /farms/{farmId}
     * @allow (get, create, update, delete) if isOwner(farmId)
     * @deny (get, create, update, delete) if !isOwner(farmId)
     * @principle Enforces document ownership for farm data.
     */
    match /farms/{farmId} {
      function isOwner(farmId) {
          return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.farmId == farmId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(farmId);
      allow list: if false; // Farm listing is not permitted.
      allow create: if isSignedIn() && isOwner(farmId);
      allow update: if isOwner(farmId);
      allow delete: if isOwner(farmId);

      /**
       * @description Allows reading and writing farm data to the owner of the farm.
       * @path /farms/{farmId}/farmData/{farmDataId}
       * @allow (get, create, update, delete) if isOwner(farmId)
       * @deny (get, create, update, delete) if !isOwner(farmId)
       * @principle Enforces document ownership for farm data.
       */
      match /farmData/{farmDataId} {
        function isOwner(farmId) {
          return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.farmId == farmId;
        }
        function isSignedIn() {
          return request.auth != null;
        }
        allow get: if isOwner(farmId);
        allow list: if isOwner(farmId);
        allow create: if isSignedIn() && isOwner(farmId);
        allow update: if isOwner(farmId);
        allow delete: if isOwner(farmId);
      }

      /**
       * @description Allows reading and writing farm alerts to the owner of the farm.
       * @path /farms/{farmId}/alerts/{alertId}
       * @allow (get, create, update, delete) if isOwner(farmId)
       * @deny (get, create, update, delete) if !isOwner(farmId)
       * @principle Enforces document ownership for farm alerts.
       */
      match /alerts/{alertId} {
          function isOwner(farmId) {
              return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.farmId == farmId;
          }
        function isSignedIn() {
          return request.auth != null;
        }
        allow get: if isOwner(farmId);
        allow list: if isOwner(farmId);
        allow create: if isSignedIn() && isOwner(farmId);
        allow update: if isOwner(farmId);
        allow delete: if isOwner(farmId);
      }
    }

    /**
     * @description Allows farmers and dealers involved in an order to read the order information. Only admins can create, update or delete an order.
     * @path /orders/{orderId}
     * @allow (get, list) if isFarmerOrDealer(resource.data.farmerId, resource.data.dealerId)
     * @allow (create, update, delete) if isAdmin()
     * @deny (get, list) if !isFarmerOrDealer(resource.data.farmerId, resource.data.dealerId)
     * @deny (create, update, delete) if !isAdmin()
     * @principle Shared access based on farmerId and dealerId.
     */
    match /orders/{orderId} {
        function isAdmin() {
            return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
        }
        function isFarmerOrDealer(farmerId, dealerId) {
          return request.auth.uid == farmerId || request.auth.uid == dealerId;
        }
      allow get: if isFarmerOrDealer(get(/databases/$(database)/documents/orders/$(orderId)).data.farmerId, get(/databases/$(database)/documents/orders/$(orderId)).data.dealerId);
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows a dealer to manage their own suppliers.
     * @path /suppliers/{supplierId}
     * @allow (get, list, create, update, delete) if isDealer(resource.data.dealerUID)
     * @deny (get, list, create, update, delete) if !isDealer(resource.data.dealerUID)
     */
    match /suppliers/{supplierId} {
      function isDealer(dealerUID) {
        return request.auth.uid == dealerUID;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isDealer(get(/databases/$(database)/documents/suppliers/$(supplierId)).data.dealerUID);
      allow list: if false;
      allow create: if isSignedIn() && isDealer(request.auth.uid);
      allow update: if isDealer(get(/databases/$(database)/documents/suppliers/$(supplierId)).data.dealerUID);
      allow delete: if isDealer(get(/databases/$(database)/documents/suppliers/$(supplierId)).data.dealerUID);
    }
  }
}