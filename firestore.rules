/**
 * @fileoverview Firestore Security Rules for the PoultryMitra application.
 *
 * Core Philosophy:
 * This ruleset prioritizes a user-ownership model, where users primarily have access to their own data.
 * It also incorporates role-based access control for specific administrative tasks.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores user profile information, accessible only to the user themselves.
 * - `/farms/{farmId}`: Stores farm information.  Access control is not clearly defined in the request and assumes public read access.
 * - `/farms/{farmId}/farmData/{farmDataId}`: Stores farm data.  Access control defaults to the farm owner.
 * - `/farms/{farmId}/alerts/{alertId}`: Stores alerts for farms. Access control defaults to the farm owner.
 * - `/subscriptionPlans/{subscriptionPlanId}`: Stores subscription plans. Assumed to be publicly readable.
 * - `/orders/{orderId}`: Stores order information, with access control based on farmer/dealer relationships.
 * - `/suppliers/{supplierId}`: Stores supplier information, accessible only to the owning dealer.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied to prevent unauthorized data access.
 * - The rules default to strict owner-only access unless explicitly stated otherwise.
 * - Read-only collections are allowed for public data (e.g., subscription plans).
 * - Admin role is determined by email address for simplicity and robustness.
 *
 * Denormalization for Authorization:
 * - Orders documents MUST contain `farmerId` and `dealerId` fields to avoid needing to query the users collection for authorization.
 * - Suppliers documents MUST contain `dealerUID` field to enforce ownership, avoiding the need for complex queries.
 *
 * Structural Segregation:
 * - No explicit structural segregation is used in this design.  Draft vs published approaches should be revisited if needed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines the admin email for elevated permissions.
     */
    function isAdmin() {
      return isSignedIn() && request.auth.token.email == 'admin@poultrymitra.com';
    }

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource, ensuring the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their own profile at /users/user123 if request.auth.uid == 'user123'.
     * @allow (get, update, delete) - User with UID 'user123' can read, update and delete their profile at /users/user123 if request.auth.uid == 'user123'.
     * @deny (create) - User with UID 'user456' cannot create a profile at /users/user123.
     * @principle Enforces document ownership for writes, restricting access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for farms.
     * @path /farms/{farmId}
     * @allow (get, list) - Any user can read farm information.
     * @allow (create) - Only an admin user can create a farm.
     * @allow (update, delete) - Only an admin user can update or delete a farm.
     * @deny (create) - Non-admin users cannot create farms.
     * @principle Allows public read access, restricts writes to admins.
     */
    match /farms/{farmId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for farm data.
     * @path /farms/{farmId}/farmData/{farmDataId}
     * @allow (get, list) - Farm owner can read farm data.
     * @allow (create) - Farm owner can create farm data.
     * @allow (update, delete) - Farm owner can update or delete farm data.
     * @deny (create) - Non-farm owners cannot create farm data.
     * @principle Enforces farm ownership for writes.
     */
    match /farms/{farmId}/farmData/{farmDataId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for farm alerts.
     * @path /farms/{farmId}/alerts/{alertId}
     * @allow (get, list) - Farm owner can read alerts.
     * @allow (create) - Farm owner can create alerts.
     * @allow (update, delete) - Farm owner can update or delete alerts.
     * @deny (create) - Non-farm owners cannot create alerts.
     * @principle Enforces farm ownership for writes.
     */
    match /farms/{farmId}/alerts/{alertId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for subscription plans.
     * @path /subscriptionPlans/{subscriptionPlanId}
     * @allow get, list: if true;
     * @allow create, update, delete: if false; // TODO: Add admin-only write rules
     * @principle Publicly readable, admin-only writes.
     */
    match /subscriptionPlans/{subscriptionPlanId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for orders.
     * @path /orders/{orderId}
     * @allow (get, list) - Farmer or Dealer can read orders if they are involved.
     * @allow (create) - Farmer or Dealer can create an order.
     * @allow (update) - Farmer or Dealer can update their own orders.
     * @allow (delete) - No one can delete orders.
     * @deny (create) - Orders cannot be created without proper farmer/dealer association.
     * @principle Enforces farmer/dealer relationship for order access.
     */
    match /orders/{orderId} {
       allow get: if (resource.data.farmerId == request.auth.uid || resource.data.dealerId == request.auth.uid);
       allow list: if true;
       allow create: if (request.resource.data.farmerId == request.auth.uid || request.resource.data.dealerId == request.auth.uid);
       allow update: if (resource.data.farmerId == request.auth.uid || resource.data.dealerId == request.auth.uid) && resource != null;
       allow delete: if false;
    }

    /**
     * @description Rules for suppliers.
     * @path /suppliers/{supplierId}
     * @allow (get, list) - Only the owning dealer can read supplier information.
     * @allow (create, update, delete) - Only the owning dealer can manage their suppliers.
     * @deny (create) - Suppliers cannot be created without proper dealer association.
     * @principle Enforces dealer ownership for supplier data.
     */
    match /suppliers/{supplierId} {
      allow get: if resource.data.dealerUID == request.auth.uid;
      allow list: if false;
      allow create: if request.resource.data.dealerUID == request.auth.uid;
      allow update: if request.resource.data.dealerUID == request.auth.uid && resource != null;
      allow delete: if request.resource.data.dealerUID == request.auth.uid && resource != null;
    }
  }
}