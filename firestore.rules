/**
 * @fileoverview Firestore Security Rules for PoultryMitra application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and farm data.
 * Admins, as determined by their presence in the `roles_admin` collection, have elevated privileges.
 * Dealer and Farmer relationships are handled through denormalization in Order objects.
 *
 * Data Structure:
 * - /users/{userId}: User profile information.
 * - /roles_admin/{userId}: Indicates admin status; document existence grants admin privileges.
 * - /farms/{farmId}: Farm information.
 * - /farms/{farmId}/farmData/{farmDataId}: Time-series data for farms.
 * - /farms/{farmId}/alerts/{alertId}: Real-time alerts for farms.
 * - /subscriptionPlans/{subscriptionPlanId}: Details of subscription plans.
 * - /orders/{orderId}: Order information, linking farmers and dealers.
 * - /suppliers/{supplierId}: Supplier information, specific to a dealer.
 *
 * Key Security Decisions:
 * - User profiles are only readable and writable by the owner.
 * - Only admins can create, update, or delete subscription plans.
 * - Farm data is accessible to the farm owner and admins.
 * - Listing of users is disallowed.
 * - Suppliers are restricted to the owning dealer.
 *
 * Denormalization for Authorization:
 * - User ownership is enforced by matching the `userId` path parameter with the authenticated user's UID.
 * - No denormalization required as ownership is derived from the path in /users/{userId}.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' can create their profile at /users/user_abc.
     * @allow (get, update, delete) User with UID 'user_abc' can read, update, and delete their profile at /users/user_abc.
     * @deny (create) User with UID 'user_xyz' cannot create a profile at /users/user_abc.
     * @deny (update, delete) User with UID 'user_xyz' cannot update or delete the profile at /users/user_abc.
     * @principle Enforces document ownership for writes; users can only manage their own profile.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to admin role documents.
     * @path /roles_admin/{userId}
     * @allow (create) User with UID 'admin_abc' can be made admin by creating a document at /roles_admin/admin_abc if they have the correct authorization.
     * @allow (get) Any user can check if an admin user exists.
     * @allow (delete) An existing admin document can be deleted.  Requires elevated privileges to manage.
     * @deny (create) Non-admin user cannot create an admin role document.
     * @deny (update) Admin role documents cannot be updated.
     * @principle Existence in this collection grants admin privileges; only admins can manage this collection.
     */
    match /roles_admin/{userId} {
      allow get: if true;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Controls access to farm documents.
     * @path /farms/{farmId}
     * @allow (get, list) Anyone can read farm information.
     * @allow (create) Only admins can create farm documents.
     * @allow (update, delete) Only admins can update or delete farm documents.
     * @deny (create) Non-admin user cannot create a farm document.
     * @deny (update, delete) Non-admin user cannot update or delete a farm document.
     * @principle Public read, admin-only write for farm management.
     */
    match /farms/{farmId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Controls access to farm data documents (time-series data).
     * @path /farms/{farmId}/farmData/{farmDataId}
     * @allow (get, list) Anyone can read farm data.
     * @allow (create) Only admins can create farm data documents.
     * @allow (update, delete) Only admins can update or delete farm data documents.
     * @deny (create) Non-admin user cannot create farm data documents.
     * @deny (update, delete) Non-admin user cannot update or delete farm data documents.
     * @principle Public read, admin-only write for farm data management.
     */
    match /farms/{farmId}/farmData/{farmDataId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Controls access to farm alert documents.
     * @path /farms/{farmId}/alerts/{alertId}
     * @allow (get, list) Anyone can read farm alerts.
     * @allow (create) Only admins can create farm alert documents.
     * @allow (update, delete) Only admins can update or delete farm alert documents.
     * @deny (create) Non-admin user cannot create farm alert documents.
     * @deny (update, delete) Non-admin user cannot update or delete farm alert documents.
     * @principle Public read, admin-only write for farm alert management.
     */
    match /farms/{farmId}/alerts/{alertId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Controls access to subscription plan documents.
     * @path /subscriptionPlans/{subscriptionPlanId}
     * @allow (get, list) Anyone can read subscription plan information.
     * @allow (create) Only admins can create subscription plan documents.
     * @allow (update, delete) Only admins can update or delete subscription plan documents.
     * @deny (create) Non-admin user cannot create a subscription plan document.
     * @deny (update, delete) Non-admin user cannot update or delete a subscription plan document.
     * @principle Public read, admin-only write for subscription plan management.
     */
    match /subscriptionPlans/{subscriptionPlanId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Controls access to order documents.
     * @path /orders/{orderId}
     * @allow (get, list) Anyone can read order information.
     * @allow (create) Only authenticated users can create orders.
     * @allow (update, delete) Only admins can update or delete order documents.
     * @deny (create) Unauthenticated user cannot create an order.
     * @deny (update, delete) Non-admin user cannot update or delete an order document.
     * @principle Public read, authenticated user create, admin-only update and delete for order management.
     */
    match /orders/{orderId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Controls access to supplier documents.
     * @path /suppliers/{supplierId}
     * @allow (get, list) Anyone can read supplier information.
     * @allow (create, update, delete) Only the dealer who owns the supplier can manage it.
     * @deny (create, update, delete) Other users cannot manage suppliers that don't belong to them.
     * @principle User-ownership model for suppliers, with an existence check on update/delete.
     */
    match /suppliers/{supplierId} {
      allow get, list: if true;
      allow create: if request.auth.uid == request.resource.data.dealerUID;
      allow update: if request.auth.uid == resource.data.dealerUID && resource != null;
      allow delete: if request.auth.uid == resource.data.dealerUID && resource != null;
    }

    /**
     * @description Function to check if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Function to check if the user is the owner of the document.
     * @param {string} userId The user ID to check against.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Function to check if the user is an admin by checking if the document exists in the roles_admin collection.
     * @return {bool} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }
  }
}