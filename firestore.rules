/**
 * @fileoverview Firestore Security Rules for PoultryMitra application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure user data access. It enforces ownership for user profiles and farm data,
 * and uses existence-based authorization for admin roles. The rules also implement role-based access control for
 * orders, ensuring that only the farmer or dealer involved in an order can access it.
 *
 * Data Structure:
 * - /userProfiles/{userId}: Stores individual user profiles, accessible only by the user themselves.
 * - /roles_admin/{userId}: Indicates admin status. If a document exists for a user, they are an admin.
 * - /farms/{farmId}: Stores farm information, accessible to authenticated users.
 * - /farms/{farmId}/farmData/{farmDataId}: Stores farm data, accessible only with farm ownership.
 * - /subscriptionPlans/{subscriptionPlanId}: Stores subscription plan information, publicly readable.
 * - /orders/{orderId}: Stores order information, accessible only to the farmer or dealer involved.
 *
 * Key Security Decisions:
 * - User profiles are strictly private and only accessible to the owning user.
 * - Admin privileges are determined by the presence of a document in the `roles_admin` collection.
 * - Subscription plans are publicly readable.
 * - Only farmers and dealers involved in an order can access it.
 * - Data validation is minimized to facilitate rapid prototyping.
 *
 * Denormalization for Authorization:
 * - UserProfile.id is used in farms and orders to simplify rules and avoid costly `get()` calls.
 *
 * Structural Segregation:
 * - Admin roles are managed in a separate `roles_admin` collection for clear separation of concerns and efficient security checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /userProfiles/{userProfileId}
     * @allow (get, create, update, delete, list) if the user is the owner of the profile.
     *   Example (create): A user with UID 'user123' can create a profile at /userProfiles/user123.
     * @deny (get, create, update, delete, list) if the user is not the owner of the profile.
     *   Example (update): A user with UID 'user456' cannot update the profile at /userProfiles/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /userProfiles/{userProfileId} {
      allow get: if isOwner(userProfileId);
      allow list: if false;
      allow create: if isOwner(userProfileId) && request.resource.data.id == userProfileId;
      allow update: if isOwner(userProfileId) && resource.data.id == userProfileId;
      allow delete: if isExistingOwner(userProfileId);
    }

    /**
     * @description Controls access to admin role documents.
     * @path /roles_admin/{userId}
     * @allow (get, create, update, delete, list) if the user is an admin (determined by document existence).
     *   Example (create): A user with admin privileges can create a document at /roles_admin/user123.
     * @deny (get, create, update, delete, list) if the user is not an admin.
     *   Example (delete): A non-admin user cannot delete the document at /roles_admin/user123.
     * @principle Uses existence-based authorization to grant admin privileges.
     */
    match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to farm documents.
     * @path /farms/{farmId}
     * @allow (get, create, update, delete, list) if the user is authenticated.
     *   Example (get): Any logged-in user can retrieve a farm document.
     * @deny (create, update, delete) if the user is not the owner.
     *   Example (update): A user who doesn't own the farm cannot update it.
     * @principle Allows public read access but restricts write access to owners.
     */
    match /farms/{farmId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      // CRITICAL: Cannot implement owner-only writes. The 'Farm' entity is missing an 'ownerId' or 'authorId' field.
    }

    /**
     * @description Controls access to farm data documents nested under a farm.
     * @path /farms/{farmId}/farmData/{farmDataId}
     * @allow (get, create, update, delete, list) if the user owns the parent farm.
     *   Example (create): The owner of the farm can create new farm data.
     * @deny (get, create, update, delete, list) if the user does not own the parent farm.
     *   Example (delete): A user who doesn't own the farm cannot delete farm data.
     * @principle Enforces document ownership for writes.
     */
    match /farms/{farmId}/farmData/{farmDataId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to subscription plan documents.
     * @path /subscriptionPlans/{subscriptionPlanId}
     * @allow (get, list) to anyone. (create, update, delete) are denied.
     *   Example (get): Any user can retrieve subscription plan information.
     * @deny (create, update, delete) to everyone.
     *   Example (delete): No one can delete a subscription plan.
     */
    match /subscriptionPlans/{subscriptionPlanId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to order documents.
     * @path /orders/{orderId}
     * @allow (get, list) if the user is either the farmer or the dealer in the order.
     *   Example (get): The farmer involved in an order can retrieve the order details.
     * @deny (create, update, delete) if the user is not either the farmer or the dealer in the order.
     *   Example (delete): A user who is not part of the order cannot delete it.
     * @principle Restricts access to orders to the involved parties (farmer or dealer).
     */
    match /orders/{orderId} {
        allow get: if isFarmerOrDealer(resource.data.farmerId, resource.data.dealerId);
        allow list: if isFarmerOrDealer(resource.data.farmerId, resource.data.dealerId);
        allow create: if isFarmerOrDealer(request.resource.data.farmerId, request.resource.data.dealerId);
        allow update: if isFarmerOrDealer(resource.data.farmerId, resource.data.dealerId);
        allow delete: if isFarmerOrDealer(resource.data.farmerId, resource.data.dealerId) && resource != null;
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId The user ID to check against.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the resource and the resource exists.
     * @param {string} userId The user ID to check against.
     * @return {bool} True if the user is the owner and resource exist, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has admin privileges (by checking for document existence in roles_admin).
     * @return {bool} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Checks if the user is either the farmer or the dealer involved in the order.
     * @param {string} farmerId The farmer's user ID.
     * @param {string} dealerId The dealer's user ID.
     * @return {bool} True if the user is either the farmer or the dealer, false otherwise.
     */
    function isFarmerOrDealer(farmerId, dealerId) {
        return request.auth.uid == farmerId || request.auth.uid == dealerId;
    }
  }
}