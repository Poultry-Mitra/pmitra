/**
 * @fileoverview Firestore Security Rules for PoultryMitra application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure user-owned data with clear role separation.
 * User data is primarily secured under the /users/{userId} path, enforcing ownership.
 * Admin privileges are granted based on document existence in the /roles_admin/{userId} collection.
 * The rules minimize external reads by relying on data denormalization within documents.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /roles_admin/{userId}: Presence indicates admin status.
 * - /farms/{farmId}: Stores farm details.
 * - /farms/{farmId}/farmData/{farmDataId}: Time-series data for farms.
 * - /farms/{farmId}/alerts/{alertId}: Alerts related to a farm.
 * - /subscriptionPlans/{subscriptionPlanId}: Details of subscription plans.
 * - /orders/{orderId}: Order information, linking farmers and dealers.
 * - /suppliers/{supplierId}: Supplier information for dealers.
 *
 * Key Security Decisions:
 * - Strict User Ownership: Users can only access and modify their own profiles.
 * - Admin Role: Admin privileges are granted based on the presence of a document in the /roles_admin/{userId} collection.
 * - Farm Data Access: Data nested under farms is restricted to authorized users.
 * - No Public User Listing: Listing all users is disallowed for privacy.
 * - Existence-Based Admin Authorization: Admin status is determined by the presence of a document in the `roles_admin` collection.
 *
 * Denormalization for Authorization:
 *   - Farm documents do not include user profile information directly. Authorization relies on the user's relationship to the farm.
 *   - Order documents include farmerId and dealerId to simplify authorization checks without requiring additional reads.
 *
 * Structural Segregation:
 *   - Private user data is stored under /users/{userId}, while public data (if any) would reside in top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to user profile information.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile. User ID in path must match auth UID.
     * @allow (get, update, delete) - Authenticated user reads/modifies their own profile.
     * @deny (create) - User attempts to create a profile with a mismatched user ID.
     * @deny (list) - Listing all user profiles is prohibited.
     * @principle Enforces document ownership for writes, restricts access to a user's own data.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to admin role assignment.
     * @path /roles_admin/{userId}
     * @allow (create) - Admin creates a new admin role assignment by creating a document.
     * @allow (get, delete) - Admin reads or deletes an existing admin role assignment.
     * @deny (create, get, delete) - Non-admin attempts to manage admin roles.
     * @deny (update) - Admin role documents are not updatable.
     * @deny (list) - Listing all admin roles is prohibited.
     * @principle Existence in this collection grants admin privileges.
     */
    match /roles_admin/{userId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if isAdmin();
    }

    /**
     * @description Manages access to farm information.
     * @path /farms/{farmId}
     * @allow (get, list) - Any user can view farm information.
     * @allow (create) - Only admins can create farms.
     * @allow (update, delete) - Only admins can update or delete farms.
     * @deny (create, update, delete) - Non-admins cannot manage farms.
     * @principle Restricts farm management to administrators.
     */
    match /farms/{farmId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages access to farm data.
     * @path /farms/{farmId}/farmData/{farmDataId}
     * @allow (get, list) - Any user can read farm data.
     * @allow (create) - Only admins can create farm data.
     * @allow (update, delete) - Only admins can modify farm data.
     * @deny (create, update, delete) - Non-admins cannot manage farm data.
     * @principle Restricts data management to administrators.
     */
    match /farms/{farmId}/farmData/{farmDataId} {
       function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages access to farm alerts.
     * @path /farms/{farmId}/alerts/{alertId}
     * @allow (get, list) - Any user can read farm alerts.
     * @allow (create) - Only admins can create farm alerts.
     * @allow (update, delete) - Only admins can modify farm alerts.
     * @deny (create, update, delete) - Non-admins cannot manage farm alerts.
     * @principle Restricts alert management to administrators.
     */
    match /farms/{farmId}/alerts/{alertId} {
       function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages access to subscription plan information.
     * @path /subscriptionPlans/{subscriptionPlanId}
     * @allow (get, list) - Any user can view subscription plans.
     * @allow (create) - Only admins can create subscription plans.
     * @allow (update, delete) - Only admins can update or delete subscription plans.
     * @deny (create, update, delete) - Non-admins cannot manage subscription plans.
     * @principle Restricts subscription plan management to administrators.
     */
    match /subscriptionPlans/{subscriptionPlanId} {
       function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages access to order information.
     * @path /orders/{orderId}
     * @allow (get) - Any authenticated user can get order information.
     * @allow (list) - Listing all orders is prohibited for security reasons.
     * @allow (create) - Any authenticated user can create orders.
     * @allow (update, delete) - Only admins can update or delete orders.
     * @deny (create, update, delete) - Non-admins cannot manage orders.
     * @principle Restricts order management to administrators.
     */
    match /orders/{orderId} {
       function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get: if request.auth != null;
      allow list: if false;
      allow create: if request.auth != null;
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages access to supplier information for dealers.
     * @path /suppliers/{supplierId}
     * @allow (get, list) - Only the dealer who owns the supplier information can access it.
     * @allow (create) - Only a dealer can create supplier information, with 'dealerUID' matching their own UID.
     * @allow (update, delete) - Only the dealer who owns the supplier information can update or delete it.
     * @deny (create, update, delete) - Other users (including other dealers) cannot manage this supplier information.
     * @principle Enforces dealer-specific ownership of supplier data.
     */
    match /suppliers/{supplierId} {
      function isDealerOwner(dealerUID) {
        return request.auth != null && request.auth.uid == dealerUID;
      }
      function isExistingDealerOwner(dealerUID) {
        return isDealerOwner(dealerUID) && resource != null;
      }
      allow get, list: if isDealerOwner(resource.data.dealerUID);
      allow create: if request.auth != null && request.resource.data.dealerUID == request.auth.uid;
      allow update: if isExistingDealerOwner(resource.data.dealerUID);
      allow delete: if isExistingDealerOwner(resource.data.dealerUID);
    }
  }
}