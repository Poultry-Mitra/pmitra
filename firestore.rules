rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner of the resource (i.e., signed in, owner, and resource exists).
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {bool} True if the user is an existing owner, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource.data != null;
    }

    /**
     * @description Checks if the user has admin privileges by verifying the existence of a document in the roles_admin collection.
     * @return {bool} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Checks if the authenticated user is the owner of the farm.
     * @param {string} farmId The farm ID to compare against the farmId in the path.
     * @return {bool} True if the user is the owner, false otherwise.
     */
     function isFarmOwner(farmId) {
        return isSignedIn() && get(/databases/$(database)/documents/farms/$(farmId)).data.ownerId == request.auth.uid;
     }

    // User Profile Rules
    /**
     * @description Manages access to user profiles, allowing users to read/write their own data and admins to list all users.
     * @path /users/{userId}
     * @allow (create) - User with matching userId can create their profile.
     * @allow (get, update, delete) - Authenticated user can access their own profile data.
     * @allow (list) - Admin can list all user profiles.
     * @deny (create, update, delete) - Non-authenticated user cannot create, update, or delete a user profile.
     * @deny (get, update, delete) - Authenticated user cannot access another user's profile data.
     * @principle Enforces document ownership and restricts listing to admins.
     */
    match /users/{userId} {
      allow get, update, delete: if isOwner(userId);
      allow create: if isOwner(userId);
      allow list: if isAdmin();
    }

    /**
     * @description Manages admin role assignments. Existence of a document grants admin privileges.
     * @path /roles_admin/{userId}
     * @allow (create) - Anyone can create a document in this collection to assign admin rights.
     * @allow (get) - Anyone can check if a user is an admin.
     * @deny (list, update, delete) - Listing, updating, and deleting are not allowed.
     * @principle Uses existence in a designated collection to grant admin privileges.
     */
    match /roles_admin/{userId} {
        allow get, create: if true;
        allow list, update, delete: if false;
    }

    // Farm Rules
    /**
     * @description Manages access to farm documents, allowing authenticated users to create farms, and owners to manage them.
     * @path /farms/{farmId}
     * @allow (create) - Authenticated user can create a farm. The `ownerId` field in the document MUST match the authenticated user's UID.
     * @allow (get, update, delete) - Owner of the farm can access and manage farm data.
     * @deny (create, update, delete) - Non-authenticated user cannot create, update, or delete a farm.
     * @deny (get, update, delete) - Authenticated user cannot access another user's farm data.
     * @principle Enforces document ownership for writes.
     */
    match /farms/{farmId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update, delete: if isFarmOwner(farmId);
    }

    // Farm Data Rules
    /**
     * @description Manages access to farm data, allowing the owner of the farm to read and write farm data.
     * @path /farms/{farmId}/farmData/{farmDataId}
     * @allow (create, update, delete) - Owner of the farm can create, update, and delete farm data.
     * @allow (get, list) - Anyone can read the data.
     * @deny (create, update, delete) - Non-authenticated user cannot create, update, or delete farm data.
     * @deny (get, update, delete) - Authenticated user cannot access another user's farm data.
     * @principle Enforces document ownership for writes; allows public reads.
     */
    match /farms/{farmId}/farmData/{farmDataId} {
        allow get: if true;
        allow list: if true;
        allow create, update, delete: if isFarmOwner(farmId);
    }

    // Farm Alert Rules
    /**
     * @description Manages access to farm alerts, allowing the owner of the farm to manage alerts.
     * @path /farms/{farmId}/alerts/{alertId}
     * @allow (create, update, delete) - Owner of the farm can create, update, and delete alerts.
     * @allow (get, list) - Farm owner or admin can read the data.
     * @deny (create, update, delete) - Non-authenticated user cannot create, update, or delete alerts.
     * @deny (get, update, delete) - Authenticated user cannot access another user's farm alerts.
     * @principle Enforces document ownership for writes; allows farm owner/admin reads.
     */
    match /farms/{farmId}/alerts/{alertId} {
        allow get: if isFarmOwner(farmId) || isAdmin();
        allow list: if isFarmOwner(farmId) || isAdmin();
        allow create, update, delete: if isFarmOwner(farmId);
    }

    // Subscription Plan Rules
    /**
     * @description Manages access to subscription plans. Public read access is granted.
     * @path /subscriptionPlans/{subscriptionPlanId}
     * @allow (get, list) - Anyone can read subscription plans.
     * @deny (create, update, delete) - No one can create, update, or delete subscription plans.
     * @principle Allows public reads.
     */
    match /subscriptionPlans/{subscriptionPlanId} {
        allow get: if true;
        allow list: if true;
        allow create, update, delete: if false;
    }

    // Order Rules
    /**
     * @description Manages access to orders, ensuring that only the involved farmer or dealer can access the order.
     * @path /orders/{orderId}
     * @allow (get, list) - Farmer or dealer involved in the order can access it.
     * @allow (create) - Authenticated users can create new orders.
     * @allow (update, delete) - Only the user who created the order can update or delete it.
     * @deny (get, update, delete) - Non-authenticated users cannot perform any operations.
     * @principle Enforces shared access between farmer and dealer.
     */
    match /orders/{orderId} {
      allow get: if isSignedIn() && (resource.data.farmerId == request.auth.uid || resource.data.dealerId == request.auth.uid);
      allow list: if isSignedIn() && (resource.data.farmerId == request.auth.uid || resource.data.dealerId == request.auth.uid);
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && (resource.data.farmerId == request.auth.uid || resource.data.dealerId == request.auth.uid);
    }

    // Supplier Rules
    /**
     * @description Manages access to suppliers, ensuring that only the dealer who owns the supplier can access it.
     * @path /suppliers/{supplierId}
     * @allow (create) - Dealer can create a supplier if the dealerUID matches the authenticated user's UID.
     * @allow (get, list, update, delete) - Dealer can manage their own suppliers.
     * @deny (create, update, delete) - Non-authenticated users cannot perform any operations.
     * @principle Enforces document ownership for suppliers.
     */
    match /suppliers/{supplierId} {
        allow get, list, update, delete: if isSignedIn() && resource.data.dealerUID == request.auth.uid;
        allow create: if isSignedIn() && request.resource.data.dealerUID == request.auth.uid;
    }
  }
}