/**
 * @fileoverview Firestore Security Rules for PoultryMitra application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure user data access based on ownership and role.
 * Users can only read and write their own profile data.
 * Administrators, identified by their presence in the `roles_admin` collection, have elevated privileges.
 * Data related to farms is secured by requiring a valid farmId and ownership validation for writes.
 * Orders are secured by checking farmer and dealer IDs.
 *
 * Data Structure:
 * - /userProfiles/{userId}: Stores individual user profiles.
 * - /roles_admin/{userId}: Presence indicates admin role.
 * - /farms/{farmId}: Stores farm information.
 * - /farms/{farmId}/farmData/{farmDataId}: Stores time-series farm data.
 * - /subscriptionPlans/{subscriptionPlanId}: Stores subscription plan details.
 * - /orders/{orderId}: Stores order information.
 *
 * Key Security Decisions:
 * - User profiles are strictly owner-readable and writable.
 * - Only administrators (ipoultrymitra@gmail.com) can create admin roles by creating documents in /roles_admin.
 * - Listing user profiles is disallowed to prevent information harvesting.
 * - Subscription plans are publicly readable.
 * - Data validation is relaxed in favor of rapid prototyping, focusing on authorization and relational integrity.
 *
 * Denormalization for Authorization:
 * The design denormalizes the 'UserProfile' in farms, subscription plans, and orders to avoid extra reads.
 * FarmData is nested under Farms to simplify data access and security rules.
 *
 * Structural Segregation:
 * Admin roles are managed via a dedicated `roles_admin` collection, separating concerns and simplifying rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /userProfiles/{userProfileId}
     * @allow (get, update, delete) if the user is the owner of the profile.
     * @allow (create) if the user's ID matches the profile ID.
     * @deny (create) if the user's ID does not match the profile ID.
     * @deny (list) All users are denied from listing user profiles.
     * @principle Enforces document ownership for writes and restricts listing user profiles.
     */
    match /userProfiles/{userProfileId} {
      // Helper function to check if the user is the owner of the profile.
      function isOwner(userProfileId) {
        return request.auth.uid == userProfileId;
      }

      // Helper function to check if the user is the existing owner of the profile.
      function isExistingOwner(userProfileId) {
        return isOwner(userProfileId) && resource != null;
      }

      // Allow the user to read their own profile.
      allow get: if isOwner(userProfileId);

      // Only the owner can create their profile, and the ID must match.
      allow create: if isOwner(userProfileId) && request.resource.data.id == userProfileId;

      // Only the owner can update their profile. The profile must exist. Enforce immutability of the user ID.
      allow update: if isExistingOwner(userProfileId) && request.resource.data.id == resource.data.id;

      // Only the owner can delete their profile. The profile must exist.
      allow delete: if isExistingOwner(userProfileId);

      // Prevent listing of user profiles for privacy.
      allow list: if false;
    }

    /**
     * @description Controls access to admin role documents.
     * @path /roles_admin/{userId}
     * @allow (create) only for the admin (ipoultrymitra@gmail.com).
     * @allow (get, delete) for existing admins.
     * @deny (update) Admins should not be able to update their role doc.
     * @deny (list) No one can list admin roles.
     * @principle Enforces admin role management and prevents unauthorized modifications.
     */
    match /roles_admin/{userId} {
      // Helper function to check if the request is made by the designated admin.
      function isAdmin() {
        return request.auth.token.email == "ipoultrymitra@gmail.com";
      }

      // Helper function to check if the user is an existing admin.
      function isExistingAdmin() {
        return isAdmin() && resource != null;
      }

      // Only the designated admin can create admin roles.
      allow create: if isAdmin();

      // Only the designated admin can get admin roles.
      allow get: if isAdmin();

      // Only the designated admin can delete admin roles.
      allow delete: if isExistingAdmin();

      // No one can update admin roles.
      allow update: if false;

      // No one can list admin roles.
      allow list: if false;
    }

    /**
     * @description Controls access to farm documents.
     * @path /farms/{farmId}
     * @allow (read) to anyone.
     * @allow (create, update, delete) only if the user is an admin or is creating/modifying their own farm.
     * @principle Enforces ownership and admin control for farm data.
     */
    match /farms/{farmId} {
      // Allow anyone to read farm data.
      allow get, list: if true;

      // Helper function to check if the user is an admin.
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      // Helper function to check if the user is the owner of the farm.
      function isFarmOwner() {
        return request.auth.uid == resource.data.userId;
      }

      // Helper function to check if the user is the existing owner of the farm.
      function isExistingFarmOwner() {
        return isFarmOwner() && resource != null;
      }

      // Only admins or the owner can create/update/delete farms.
      // TODO: Add owner validation once the schema is updated with an ownership field.
      allow create, update, delete: if isAdmin(); // TODO: Investigate ownership
      //allow create, update, delete: if isAdmin() || isExistingFarmOwner();
    }

    /**
     * @description Controls access to farm data documents.
     * @path /farms/{farmId}/farmData/{farmDataId}
     * @allow (read) to anyone.
     * @allow (create, update, delete) only if the user is an admin or the farm owner.
     * @principle Enforces ownership and admin control for farm data.
     */
    match /farms/{farmId}/farmData/{farmDataId} {
      // Helper function to check if the user is an admin.
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      // Helper function to check if the user is the owner of the parent farm.
      function isFarmOwner(farmId) {
          return get(/databases/$(database)/documents/farms/$(farmId)).data.userId == request.auth.uid;
      }

      // Helper function to check if the user is the existing owner of the parent farm.
      function isExistingFarmOwner(farmId) {
          return isFarmOwner(farmId) && resource != null;
      }

      // Allow anyone to read farm data.
      allow get, list: if true;

      // Only admins or the farm owner can create/update/delete farm data.
      allow create: if isAdmin(); // TODO: Investigate ownership
      allow update: if isAdmin() && resource != null; // TODO: Investigate ownership
      allow delete: if isAdmin() && resource != null; // TODO: Investigate ownership
      //allow create: if isAdmin() || isFarmOwner(farmId);
      //allow update: if (isAdmin() || isExistingFarmOwner(farmId)) && resource != null;
      //allow delete: if (isAdmin() || isExistingFarmOwner(farmId)) && resource != null;
    }

    /**
     * @description Controls access to subscription plan documents.
     * @path /subscriptionPlans/{subscriptionPlanId}
     * @allow (read) to anyone.
     * @deny (create, update, delete) to everyone except admins.
     * @principle Allows public read access to subscription plans and restricts write access to admins.
     */
    match /subscriptionPlans/{subscriptionPlanId} {
      // Helper function to check if the user is an admin.
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      // Allow anyone to read subscription plan data.
      allow get, list: if true;

      // Only admins can create/update/delete subscription plans.
      allow create, update, delete: if isAdmin(); // TODO: Investigate ownership
    }

    /**
     * @description Controls access to order documents.
     * @path /orders/{orderId}
     * @allow (read) to anyone.
     * @allow (create, update, delete) only if the user is an admin or the farmer/dealer associated with the order.
     * @principle Enforces role-based access control for orders.
     */
    match /orders/{orderId} {
      // Helper function to check if the user is an admin.
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      // Helper function to check if the user is the farmer or dealer associated with the order.
      function isFarmerOrDealer() {
        return request.auth.uid == resource.data.farmerId || request.auth.uid == resource.data.dealerId;
      }

      // Helper function to check if the user is an existing farmer or dealer associated with the order.
      function isExistingFarmerOrDealer() {
        return isFarmerOrDealer() && resource != null;
      }

      // Allow anyone to read order data.
      allow get, list: if true;

      // Only admins or the farmer/dealer can create/update/delete orders.
      allow create, update, delete: if isAdmin(); // TODO: Investigate ownership
      //allow create: if isAdmin() || (request.resource.data.farmerId == request.auth.uid || request.resource.data.dealerId == request.auth.uid);
      //allow update: if (isAdmin() || isExistingFarmerOrDealer()) && resource != null;
      //allow delete: if (isAdmin() || isExistingFarmerOrDealer()) && resource != null;
    }
  }
}