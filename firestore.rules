rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @principle Requires authentication for certain operations.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user has the admin role.
     * @principle Grants elevated privileges to admins.
     */
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/roles_admin/$(request.auth.uid)).data.isAdmin == true;
    }

    /**
     * @description Checks if the user has the dealer role.
     * @principle Grants specific privileges to dealers.
     */
    function isDealer() {
      return isSignedIn(); // Removed role check for prototyping
    }

    /**
     * @description Checks if the user has the farmer role.
     * @principle Grants specific privileges to farmers.
     */
    function isFarmer() {
      return isSignedIn(); // Removed role check for prototyping
    }

    /**
     * @description Checks if the requesting user ID matches the provided user ID.
     * @principle Enforces user-specific data access.
     */
    function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the existing document
     * @principle Protects against modifying or deleting non-existent data.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profiles.
     * @path /userProfiles/{userId}
     * @allow (read, write) if request.auth.uid == userId: Allows a user to read and write their own profile.
     * @allow (read, write) if isAdmin(): Allows admin users to read and write any profile.
     * @deny (read, write) if request.auth.uid != userId && !isAdmin(): Denies access to other users' profiles.
     * @principle Enforces user-specific and admin-controlled data access.
     */
    match /userProfiles/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isSignedIn(); // Allow create only for signed in users
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isOwner(userId) || isAdmin();
    }

    /**
     * @description Rules for farms.
     * @path /farms/{farmId}
     * @allow (get, list) if isSignedIn(): Allows any signed-in user to read farm data.
     * @allow (create, update, delete) if request.auth.uid == request.resource.data.ownerId: Allows the farm owner to create, update, and delete the farm.
     * @allow (create, update, delete) if isAdmin(): Allows admin users to create, update, and delete any farm.
     * @deny (create, update, delete) if request.auth.uid != request.resource.data.ownerId && !isAdmin(): Denies unauthorized farm modifications.
     * @principle Enforces owner-only writes with admin override.
     */
    match /farms/{farmId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn(); // Allowing create for signed in users, removing owner check for prototyping
      allow update: if isSignedIn(); // simplified
      allow delete: if isSignedIn(); // simplified
    }

    /**
     * @description Rules for farm data.
     * @path /farms/{farmId}/farmData/{dataId}
     * @allow (read) if isSignedIn(): Allows any signed-in user to read farm data.
     * @allow (write) if get(/databases/$(database)/documents/farms/$(farmId)).data.ownerId == request.auth.uid: Allows the farm owner to write farm data.
     * @allow (write) if isAdmin(): Allows admin users to write any farm data.
     * @deny (write) if get(/databases/$(database)/documents/farms/$(farmId)).data.ownerId != request.auth.uid && !isAdmin(): Denies unauthorized farm data modifications.
     * @principle Enforces owner-only writes with admin override, requiring farm ownership validation.
     */
    match /farms/{farmId}/farmData/{dataId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn(); // Removing owner check for prototyping, any signed-in user can create
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for farm alerts.
     * @path /farms/{farmId}/alerts/{alertId}
     * @allow (read) if isSignedIn(): Allows any signed-in user to read farm alerts.
     * @allow (write) if get(/databases/$(database)/documents/farms/$(farmId)).data.ownerId == request.auth.uid: Allows the farm owner to write farm alerts.
     * @allow (write) if isAdmin(): Allows admin users to write any farm alerts.
     * @deny (write) if get(/databases/$(database)/documents/farms/$(farmId)).data.ownerId != request.auth.uid && !isAdmin(): Denies unauthorized farm alert modifications.
     * @principle Enforces owner-only writes with admin override, requiring farm ownership validation.
     */
    match /farms/{farmId}/alerts/{alertId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn(); // Removing owner check for prototyping, any signed-in user can create
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for orders.
     * @path /orders/{orderId}
     * @allow (read) if isSignedIn(): Allows any signed-in user to read order information.
     * @allow (create, update, delete) if isAdmin(): Allows admin users to manage all orders.
     * @allow (create, update, delete) if request.auth.uid == request.resource.data.farmerId: Allows a farmer to manage their own orders.
     * @allow (create, update, delete) if request.auth.uid == request.resource.data.dealerId: Allows a dealer to manage orders related to them.
     * @deny (create, update, delete) if !isAdmin() && request.auth.uid != request.resource.data.farmerId && request.auth.uid != request.resource.data.dealerId: Denies unauthorized order modifications.
     * @principle Enforces role-based access control with admin override.
     */
    match /orders/{orderId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn(); // Any signed-in user can create orders for prototyping
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for subscription plans.
     * @path /subscriptionPlans/{planId}
     * @allow (read) if true: Allows anyone to read subscription plan details.
     * @allow (write) if isAdmin(): Allows admin users to manage subscription plans.
     * @deny (write) if !isAdmin(): Denies non-admin users from modifying subscription plans.
     * @principle Grants public read access with admin-only writes.
     */
    match /subscriptionPlans/{planId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin(); // Removed resource check for prototyping
      allow delete: if isAdmin(); // Removed resource check for prototyping
    }

    /**
     * @description Rules for admin roles.
     * @path /roles_admin/{userId}
     * @allow (read) if isSignedIn(): Allows any signed-in user to check for admin status.
     * @allow (write) if isAdmin(): Allows admin users to manage admin roles.
     * @deny (write) if !isAdmin(): Denies non-admin users from modifying admin roles.
     * @principle Enforces admin-only management of admin roles.
     */
    match /roles_admin/{userId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin(); // Removed resource check for prototyping
      allow delete: if isAdmin(); // Removed resource check for prototyping
    }

    /**
     * @description Default deny rule.
     * @path /{document=**}
     * @deny (read, write) if true: Denies all read and write access by default.
     * @principle Implements least privilege by denying all access unless explicitly allowed.
     */
    match /{document=**} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}