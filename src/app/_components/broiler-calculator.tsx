// src/app/_components/broiler-calculator.tsx
"use client";

import { useState, useMemo, useCallback }from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input }from '@/components/ui/input';
import { Label }from '@/components/ui/label';
import { Button }from '@/components/ui/button';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow }from '@/components/ui/table';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Separator } from '@/components/ui/separator';
import { Calculator, FileText } from 'lucide-react';
import { cn } from '@/lib/utils';

const initialState = {
  chicks: 1000,
  starterRate: 2200,
  growerRate: 2100,
  finisherRate: 2000,
  chickCostPerUnit: 22,
  medicineCost: 2000,
  otherCost: 10000,
  marketPrice: 120,
};

export function BroilerCalculator() {
  const [inputs, setInputs] = useState(initialState);
  const [showSummary, setShowSummary] = useState(false);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { id, value } = e.target;
    setInputs(prev => ({ ...prev, [id]: Number(value) }));
  };

  const calculations = useMemo(() => {
    const { chicks, starterRate, growerRate, finisherRate, chickCostPerUnit, medicineCost, otherCost, marketPrice } = inputs;
    
    if (chicks <= 0) return null;

    const starterBags = Math.ceil((chicks * 0.5) / 50);
    const growerBags = Math.ceil((chicks * 1.0) / 50);
    const finisherBags = Math.ceil((chicks * 1.5) / 50);
    const totalBags = starterBags + growerBags + finisherBags;

    const smallDrinkers = Math.ceil(chicks * 0.025);
    const largeDrinkers = Math.ceil(chicks * 0.025);
    const smallFeeders = Math.ceil(chicks * 0.02);
    const largeFeeders = Math.ceil(chicks * 0.02);

    const starterCost = starterBags * starterRate;
    const growerCost = growerBags * growerRate;
    const finisherCost = finisherBags * finisherRate;
    const totalFeedCost = starterCost + growerCost + finisherCost;

    const chickCost = chicks * chickCostPerUnit;
    const totalCost = chickCost + totalFeedCost + medicineCost + otherCost;

    const avgWeight = 2.0;
    const totalWeight = chicks * avgWeight;
    const income = totalWeight * marketPrice;
    const profit = income - totalCost;

    return {
      starterBags, growerBags, finisherBags, totalBags,
      smallDrinkers, largeDrinkers, smallFeeders, largeFeeders,
      totalFeedCost, chickCost, totalCost, income, profit,
      totalWeight
    };
  }, [inputs]);

  const generatePlan = useCallback(() => {
      if (inputs.chicks > 0) {
        setShowSummary(true);
      }
  }, [inputs.chicks]);

  const formatCurrency = (value: number) => {
    return `‚Çπ${value.toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;
  }
  
  return (
    <Card>
      <CardHeader>
        <div className="flex items-center gap-2">
            <Calculator className="size-8 text-primary" />
            <div>
                 <CardTitle className="font-headline text-2xl">Broiler Farm Calculator</CardTitle>
                 <CardDescription>Estimate your costs and profits for a 45-day broiler cycle.</CardDescription>
            </div>
        </div>
      </CardHeader>
      <CardContent className="space-y-8">
        <Alert>
            <AlertTitle>‡§∂‡•à‡§ï‡•ç‡§∑‡§ø‡§ï ‡§â‡§¶‡•ç‡§¶‡•á‡§∂‡•ç‡§Ø (Educational Purpose)</AlertTitle>
            <AlertDescription>
                ‡§Ø‡§π ‡§â‡§™‡§ï‡§∞‡§£ ‡§ï‡•á‡§µ‡§≤ ‡§∏‡•Ç‡§ö‡§®‡§æ ‡§î‡§∞ ‡§´‡§æ‡§∞‡•ç‡§Æ ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§® ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡•à‡•§ ‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä ‡§ó‡§Ç‡§≠‡•Ä‡§∞ ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§Æ‡•á‡§Ç ‡§∏‡•ç‡§•‡§æ‡§®‡•Ä‡§Ø ‡§™‡§Ç‡§ú‡•Ä‡§ï‡•É‡§§ ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û ‡§∏‡•á ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§® ‡§≤‡•á‡§Ç‡•§
            </AlertDescription>
        </Alert>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 items-end">
            <div className="space-y-2">
                <Label htmlFor="chicks" className="font-bold">‡§ö‡•Ç‡§ú‡•ã‡§Ç ‡§ï‡•Ä ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ ‡§°‡§æ‡§≤‡•á‡§Ç (Enter Number of Chicks):</Label>
                <Input id="chicks" type="number" min="1" placeholder="e.g., 1000" value={inputs.chicks} onChange={handleInputChange} />
            </div>
             <Button onClick={generatePlan} size="lg">‡§™‡•ç‡§≤‡§æ‡§® ‡§ú‡§®‡§∞‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç</Button>
        </div>

        {showSummary && calculations && (
            <div className="space-y-6 animate-in fade-in-50">
                {/* Feed Plan Section */}
                <div>
                    <h3 className="text-lg font-semibold mb-2">üåæ ‡§´‡•Ä‡§° ‡§™‡•ç‡§≤‡§æ‡§® (50 ‡§ï‡§ø‡§ó‡•ç‡§∞‡§æ ‡§¨‡•à‡§ó ‡§Æ‡•á‡§Ç)</h3>
                    <Table>
                        <TableHeader>
                            <TableRow>
                                <TableHead>‡§´‡•á‡§ú‡§º</TableHead>
                                <TableHead>‡§¶‡§ø‡§®</TableHead>
                                <TableHead>‡§¨‡•à‡§ó</TableHead>
                                <TableHead className="w-[150px]">‡§¨‡•à‡§ó ‡§¶‡§æ‡§Æ (‚Çπ)</TableHead>
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            <TableRow>
                                <TableCell>PRE-‡§∏‡•ç‡§ü‡§æ‡§∞‡•ç‡§ü‡§∞</TableCell>
                                <TableCell>1‚Äì14</TableCell>
                                <TableCell>{calculations.starterBags}</TableCell>
                                <TableCell><Input id="starterRate" type="number" value={inputs.starterRate} onChange={handleInputChange} /></TableCell>
                            </TableRow>
                             <TableRow>
                                <TableCell>‡§∏‡•ç‡§ü‡§æ‡§∞‡•ç‡§ü‡§∞</TableCell>
                                <TableCell>15‚Äì28</TableCell>
                                <TableCell>{calculations.growerBags}</TableCell>
                                <TableCell><Input id="growerRate" type="number" value={inputs.growerRate} onChange={handleInputChange} /></TableCell>
                            </TableRow>
                             <TableRow>
                                <TableCell>‡§´‡§ø‡§®‡§ø‡§∂‡§∞</TableCell>
                                <TableCell>29‚Äì45</TableCell>
                                <TableCell>{calculations.finisherBags}</TableCell>
                                <TableCell><Input id="finisherRate" type="number" value={inputs.finisherRate} onChange={handleInputChange} /></TableCell>
                            </TableRow>
                        </TableBody>
                    </Table>
                </div>

                 {/* Equipment Section */}
                <div>
                    <h3 className="text-lg font-semibold mb-2">üîß ‡§´‡•Ä‡§°‡§∞ ‡§î‡§∞ ‡§°‡•ç‡§∞‡§ø‡§Ç‡§ï‡§∞ ‡§ï‡•Ä ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ</h3>
                    <Table>
                        <TableHeader>
                            <TableRow>
                                <TableHead>‡§â‡§™‡§ï‡§∞‡§£</TableHead>
                                <TableHead>‡§ö‡§∞‡§£</TableHead>
                                <TableHead>‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ</TableHead>
                            </TableRow>
                        </TableHeader>
                         <TableBody>
                            <TableRow><TableCell>‡§°‡•ç‡§∞‡§ø‡§Ç‡§ï‡§∞ (‡§õ‡•ã‡§ü‡•á)</TableCell><TableCell>‡§¶‡§ø‡§® 1‚Äì14</TableCell><TableCell>{calculations.smallDrinkers}</TableCell></TableRow>
                            <TableRow><TableCell>‡§°‡•ç‡§∞‡§ø‡§Ç‡§ï‡§∞ (‡§¨‡§°‡§º‡•á)</TableCell><TableCell>‡§¶‡§ø‡§® 15‚Äì45</TableCell><TableCell>{calculations.largeDrinkers}</TableCell></TableRow>
                            <TableRow><TableCell>‡§´‡•Ä‡§°‡§∞ (‡§õ‡•ã‡§ü‡•á)</TableCell><TableCell>‡§¶‡§ø‡§® 1‚Äì14</TableCell><TableCell>{calculations.smallFeeders}</TableCell></TableRow>
                            <TableRow><TableCell>‡§´‡•Ä‡§°‡§∞ (‡§¨‡§°‡§º‡•á)</TableCell><TableCell>‡§¶‡§ø‡§® 15‚Äì45</TableCell><TableCell>{calculations.largeFeeders}</TableCell></TableRow>
                        </TableBody>
                    </Table>
                </div>
                
                 {/* Summary Section */}
                <div>
                    <h3 className="text-lg font-semibold mb-2">üìå ‡§®‡§ø‡§∑‡•ç‡§ï‡§∞‡•ç‡§∑: ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§´‡§æ‡§∞‡•ç‡§Æ ‡§™‡•ç‡§≤‡§æ‡§® ‡§∏‡§æ‡§∞‡§æ‡§Ç‡§∂</h3>
                     <Card className="bg-secondary/50">
                        <CardContent className="pt-6 grid grid-cols-1 md:grid-cols-2 gap-x-8 gap-y-4">
                            {/* Costs Column */}
                            <div className="space-y-3">
                                <h4 className="font-bold text-destructive">‡§≤‡§æ‡§ó‡§§ ‡§µ‡§ø‡§µ‡§∞‡§£ (Cost Details)</h4>
                                <div className="flex justify-between items-center text-sm">
                                    <Label>‡§ö‡•Ç‡§ú‡§æ ‡§≤‡§æ‡§ó‡§§ (‚Çπ/‡§ö‡•Ç‡§ú‡§æ)</Label>
                                    <Input id="chickCostPerUnit" type="number" value={inputs.chickCostPerUnit} onChange={handleInputChange} className="w-24 h-8" />
                                </div>
                                <div className="flex justify-between items-center text-sm">
                                    <Label>‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§® ‡§≤‡§æ‡§ó‡§§ (‚Çπ)</Label>
                                    <Input id="medicineCost" type="number" value={inputs.medicineCost} onChange={handleInputChange} className="w-24 h-8" />
                                </div>
                                <div className="flex justify-between items-center text-sm">
                                    <Label>‡§Ö‡§®‡•ç‡§Ø ‡§ñ‡§∞‡•ç‡§ö (‚Çπ)</Label>
                                    <Input id="otherCost" type="number" value={inputs.otherCost} onChange={handleInputChange} className="w-24 h-8" />
                                </div>
                                <Separator />
                                <div className="flex justify-between items-center font-semibold">
                                    <span>‡§´‡•Ä‡§° ‡§≤‡§æ‡§ó‡§§:</span>
                                    <span>{formatCurrency(calculations.totalFeedCost)}</span>
                                </div>
                                 <div className="flex justify-between items-center font-bold text-lg text-destructive">
                                    <span>‡§ï‡•Å‡§≤ ‡§≤‡§æ‡§ó‡§§:</span>
                                    <span>{formatCurrency(calculations.totalCost)}</span>
                                </div>
                            </div>
                            {/* Income & Profit Column */}
                            <div className="space-y-3">
                                <h4 className="font-bold text-green-600">‡§Ü‡§Ø ‡§î‡§∞ ‡§≤‡§æ‡§≠ (Income & Profit)</h4>
                                <div className="flex justify-between items-center text-sm">
                                    <Label>‡§¨‡§æ‡§ú‡§æ‡§∞ ‡§≠‡§æ‡§µ (‚Çπ/‡§ï‡§ø‡§ó‡•ç‡§∞‡§æ)</Label>
                                    <Input id="marketPrice" type="number" value={inputs.marketPrice} onChange={handleInputChange} className="w-24 h-8" />
                                </div>
                                <Separator />
                                <div className="flex justify-between items-center font-semibold">
                                    <span>‡§ï‡•Å‡§≤ ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§ø‡§§ ‡§Æ‡§æ‡§Ç‡§∏:</span>
                                    <span>{calculations.totalWeight.toLocaleString('en-IN')} ‡§ï‡§ø‡§ó‡•ç‡§∞‡§æ</span>
                                </div>
                                <div className="flex justify-between items-center font-bold text-lg text-green-600">
                                    <span>‡§ï‡•Å‡§≤ ‡§Ü‡§Ø:</span>
                                    <span>{formatCurrency(calculations.income)}</span>
                                </div>
                                <div className={cn("flex justify-between font-bold text-xl p-3 rounded-md", calculations.profit > 0 ? "bg-green-500/10 text-green-700" : "bg-destructive/10 text-destructive")}>
                                    <span>‡§Ö‡§®‡•Å‡§Æ‡§æ‡§®‡§ø‡§§ ‡§≤‡§æ‡§≠:</span>
                                    <span>{formatCurrency(calculations.profit)}</span>
                                </div>
                            </div>
                        </CardContent>
                    </Card>
                </div>

                <div className="rounded-lg border bg-blue-500/10 p-4 text-sm text-blue-800 dark:text-blue-300">
                    <strong className="font-semibold">üåü ‡§ü‡§ø‡§™ (Tip):</strong> ‡§¨‡§ø‡§ï‡•ç‡§∞‡•Ä ‡§∏‡•á 6-12 ‡§ò‡§Ç‡§ü‡•á ‡§™‡§π‡§≤‡•á ‡§´‡•Ä‡§° ‡§¨‡§Ç‡§¶ ‡§ï‡§∞ ‡§¶‡•á‡§Ç‡•§ ‡§™‡§æ‡§®‡•Ä ‡§ú‡§æ‡§∞‡•Ä ‡§∞‡§ñ‡•á‡§Ç‡•§ ‡§á‡§∏‡§∏‡•á ‡§Ü‡§Ç‡§§ ‡§∏‡§æ‡§´ ‡§∞‡§π‡•á‡§ó‡•Ä ‡§î‡§∞ ‡§¨‡§æ‡§ú‡§æ‡§∞ ‡§Æ‡•á‡§Ç ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§¶‡§æ‡§Æ ‡§Æ‡§ø‡§≤‡•á‡§ó‡§æ‡•§
                </div>
            </div>
        )}
      </CardContent>
    </Card>
  );
}
